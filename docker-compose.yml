version: "3.8"

services:
  cart:
    container_name: cart
    image: cart
    build:
      context: ./cart
      dockerfile: ./Dockerfile
    ports:
      - "8082:8082" # HTTP
    environment:
      - GRPC_LOMS_SERVICE_HOST=loms
    depends_on:
      - loms
    restart: 
      on-failure

  loms:
    container_name: loms
    image: loms
    build:
      context: ./loms
      dockerfile: ./Dockerfile
    ports:
      - "8084:8084" # HTTP
      - "50051:50051" # gRPC
    environment:
      - PG_HOST=postgres_master
      - PG_PORT=5432
      - PG_REPLICA=postgres_replica
      - PG_REPLICA_PORT=5432
      - PG_MASTER_DSN=postgres://loms-user:loms-password@postgres_master:5432/loms?sslmode=disable
      - PG_REPLICA_DSN=postgres://loms-user:loms-password@postgres_replica:5432/loms?sslmode=disable
    depends_on:
      - postgres_master
      - kafka0
    restart: 
      on-failure

  postgres_master:
    build:
      context: ./loms/postgresconfig
      dockerfile: lomspgmaster.Dockerfile
    container_name: postgres_master
    environment:
      - POSTGRES_DB=loms
      - POSTGRES_USER=loms-user
      - POSTGRES_PASSWORD=loms-password
    ports:
      - "5432:5432"
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf' -c 'hba_file=/etc/postgresql/pg_hba.conf'
    restart: on-failure

  postgres_replica:
    build:
      context: ./loms/postgresconfig
      dockerfile: lomspgreplica.Dockerfile
    container_name: postgres_replica
    environment:
      - POSTGRES_MASTER_HOST=postgres_master
      - POSTGRES_USER=loms-user
      - POSTGRES_PASSWORD=loms-password
      - POSTGRES_DB=loms
    depends_on:
      - postgres_master
    ports:
      - "5433:5432"
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf' -c 'hba_file=/etc/postgresql/pg_hba.conf'
    restart: on-failure

  loms_migrator:
    build:
      context: ./loms
      dockerfile: lomsmigration.Dockerfile
    restart: on-failure
    environment:
      DB_HOST: postgres_master
      DB_PORT: 5432
      DB_USER: loms-user
      DB_PASSWORD: loms-password
      DB_NAME: loms

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    volumes:
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - "3000:3000"

  jaeger:
    image: jaegertracing/all-in-one
    ports:
      - "16686:16686"
      - "4318:4318"
      - "14268:14268"

  notifier:
    container_name: notifier
    image: notifier
    build:
      context: ./notifier
      dockerfile: ./Dockerfile
    depends_on:
      - kafka0
    restart: 
      on-failure

  notifier1:
    container_name: notifier
    image: notifier
    build:
      context: ./notifier
      dockerfile: ./Dockerfile
    depends_on:
      - kafka0
    restart:
      on-failure

  notifier2:
    container_name: notifier
    image: notifier
    build:
      context: ./notifier
      dockerfile: ./Dockerfile
    depends_on:
      - kafka0
    restart:
      on-failure
  
  kafka0:
    container_name: route256-kafka
    image: confluentinc/cp-kafka:7.5.4.arm64
    ports:
      - 9092:9092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka0:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka0:29092,CONTROLLER://kafka0:29093,PLAINTEXT_HOST://:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka0:29093"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'

  kafka-init-topics:
    container_name: route256-kafka-init-topics
    image: confluentinc/cp-kafka:7.5.4.arm64
    depends_on:
      - kafka0
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
      cub kafka-ready -b kafka0:29092 1 30 && \
      kafka-topics --create --topic loms.order-events --partitions 2 --replication-factor 1 --if-not-exists --bootstrap-server kafka0:29092'"

  kafka-ui:
    container_name: route256-kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka0:29092
      DYNAMIC_CONFIG_ENABLED: "true"
