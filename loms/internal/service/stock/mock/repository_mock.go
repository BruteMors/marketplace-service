// Code generated by http://github.com/gojuno/minimock (v3.3.12). DO NOT EDIT.

package mock

//go:generate minimock -i github.com/BruteMors/marketplace-service/loms/internal/service/stock.Repository -o repository_mock.go -n RepositoryMock -p mock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	stockmodels "github.com/BruteMors/marketplace-service/loms/internal/models/stock"
	"github.com/gojuno/minimock/v3"
)

// RepositoryMock implements stock.Repository
type RepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetBySKU          func(ctx context.Context, skuID uint32) (i1 stockmodels.Item, err error)
	inspectFuncGetBySKU   func(ctx context.Context, skuID uint32)
	afterGetBySKUCounter  uint64
	beforeGetBySKUCounter uint64
	GetBySKUMock          mRepositoryMockGetBySKU

	funcReserve          func(ctx context.Context, item []stockmodels.ReserveItem) (err error)
	inspectFuncReserve   func(ctx context.Context, item []stockmodels.ReserveItem)
	afterReserveCounter  uint64
	beforeReserveCounter uint64
	ReserveMock          mRepositoryMockReserve

	funcReserveCancel          func(ctx context.Context, item []stockmodels.ReserveItem) (err error)
	inspectFuncReserveCancel   func(ctx context.Context, item []stockmodels.ReserveItem)
	afterReserveCancelCounter  uint64
	beforeReserveCancelCounter uint64
	ReserveCancelMock          mRepositoryMockReserveCancel

	funcReserveRemove          func(ctx context.Context, item []stockmodels.ReserveItem) (err error)
	inspectFuncReserveRemove   func(ctx context.Context, item []stockmodels.ReserveItem)
	afterReserveRemoveCounter  uint64
	beforeReserveRemoveCounter uint64
	ReserveRemoveMock          mRepositoryMockReserveRemove
}

// NewRepositoryMock returns a mock for stock.Repository
func NewRepositoryMock(t minimock.Tester) *RepositoryMock {
	m := &RepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetBySKUMock = mRepositoryMockGetBySKU{mock: m}
	m.GetBySKUMock.callArgs = []*RepositoryMockGetBySKUParams{}

	m.ReserveMock = mRepositoryMockReserve{mock: m}
	m.ReserveMock.callArgs = []*RepositoryMockReserveParams{}

	m.ReserveCancelMock = mRepositoryMockReserveCancel{mock: m}
	m.ReserveCancelMock.callArgs = []*RepositoryMockReserveCancelParams{}

	m.ReserveRemoveMock = mRepositoryMockReserveRemove{mock: m}
	m.ReserveRemoveMock.callArgs = []*RepositoryMockReserveRemoveParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mRepositoryMockGetBySKU struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockGetBySKUExpectation
	expectations       []*RepositoryMockGetBySKUExpectation

	callArgs []*RepositoryMockGetBySKUParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// RepositoryMockGetBySKUExpectation specifies expectation struct of the Repository.GetBySKU
type RepositoryMockGetBySKUExpectation struct {
	mock      *RepositoryMock
	params    *RepositoryMockGetBySKUParams
	paramPtrs *RepositoryMockGetBySKUParamPtrs
	results   *RepositoryMockGetBySKUResults
	Counter   uint64
}

// RepositoryMockGetBySKUParams contains parameters of the Repository.GetBySKU
type RepositoryMockGetBySKUParams struct {
	ctx   context.Context
	skuID uint32
}

// RepositoryMockGetBySKUParamPtrs contains pointers to parameters of the Repository.GetBySKU
type RepositoryMockGetBySKUParamPtrs struct {
	ctx   *context.Context
	skuID *uint32
}

// RepositoryMockGetBySKUResults contains results of the Repository.GetBySKU
type RepositoryMockGetBySKUResults struct {
	i1  stockmodels.Item
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetBySKU *mRepositoryMockGetBySKU) Optional() *mRepositoryMockGetBySKU {
	mmGetBySKU.optional = true
	return mmGetBySKU
}

// Expect sets up expected params for Repository.GetBySKU
func (mmGetBySKU *mRepositoryMockGetBySKU) Expect(ctx context.Context, skuID uint32) *mRepositoryMockGetBySKU {
	if mmGetBySKU.mock.funcGetBySKU != nil {
		mmGetBySKU.mock.t.Fatalf("RepositoryMock.GetBySKU mock is already set by Set")
	}

	if mmGetBySKU.defaultExpectation == nil {
		mmGetBySKU.defaultExpectation = &RepositoryMockGetBySKUExpectation{}
	}

	if mmGetBySKU.defaultExpectation.paramPtrs != nil {
		mmGetBySKU.mock.t.Fatalf("RepositoryMock.GetBySKU mock is already set by ExpectParams functions")
	}

	mmGetBySKU.defaultExpectation.params = &RepositoryMockGetBySKUParams{ctx, skuID}
	for _, e := range mmGetBySKU.expectations {
		if minimock.Equal(e.params, mmGetBySKU.defaultExpectation.params) {
			mmGetBySKU.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetBySKU.defaultExpectation.params)
		}
	}

	return mmGetBySKU
}

// ExpectCtxParam1 sets up expected param ctx for Repository.GetBySKU
func (mmGetBySKU *mRepositoryMockGetBySKU) ExpectCtxParam1(ctx context.Context) *mRepositoryMockGetBySKU {
	if mmGetBySKU.mock.funcGetBySKU != nil {
		mmGetBySKU.mock.t.Fatalf("RepositoryMock.GetBySKU mock is already set by Set")
	}

	if mmGetBySKU.defaultExpectation == nil {
		mmGetBySKU.defaultExpectation = &RepositoryMockGetBySKUExpectation{}
	}

	if mmGetBySKU.defaultExpectation.params != nil {
		mmGetBySKU.mock.t.Fatalf("RepositoryMock.GetBySKU mock is already set by Expect")
	}

	if mmGetBySKU.defaultExpectation.paramPtrs == nil {
		mmGetBySKU.defaultExpectation.paramPtrs = &RepositoryMockGetBySKUParamPtrs{}
	}
	mmGetBySKU.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetBySKU
}

// ExpectSkuIDParam2 sets up expected param skuID for Repository.GetBySKU
func (mmGetBySKU *mRepositoryMockGetBySKU) ExpectSkuIDParam2(skuID uint32) *mRepositoryMockGetBySKU {
	if mmGetBySKU.mock.funcGetBySKU != nil {
		mmGetBySKU.mock.t.Fatalf("RepositoryMock.GetBySKU mock is already set by Set")
	}

	if mmGetBySKU.defaultExpectation == nil {
		mmGetBySKU.defaultExpectation = &RepositoryMockGetBySKUExpectation{}
	}

	if mmGetBySKU.defaultExpectation.params != nil {
		mmGetBySKU.mock.t.Fatalf("RepositoryMock.GetBySKU mock is already set by Expect")
	}

	if mmGetBySKU.defaultExpectation.paramPtrs == nil {
		mmGetBySKU.defaultExpectation.paramPtrs = &RepositoryMockGetBySKUParamPtrs{}
	}
	mmGetBySKU.defaultExpectation.paramPtrs.skuID = &skuID

	return mmGetBySKU
}

// Inspect accepts an inspector function that has same arguments as the Repository.GetBySKU
func (mmGetBySKU *mRepositoryMockGetBySKU) Inspect(f func(ctx context.Context, skuID uint32)) *mRepositoryMockGetBySKU {
	if mmGetBySKU.mock.inspectFuncGetBySKU != nil {
		mmGetBySKU.mock.t.Fatalf("Inspect function is already set for RepositoryMock.GetBySKU")
	}

	mmGetBySKU.mock.inspectFuncGetBySKU = f

	return mmGetBySKU
}

// Return sets up results that will be returned by Repository.GetBySKU
func (mmGetBySKU *mRepositoryMockGetBySKU) Return(i1 stockmodels.Item, err error) *RepositoryMock {
	if mmGetBySKU.mock.funcGetBySKU != nil {
		mmGetBySKU.mock.t.Fatalf("RepositoryMock.GetBySKU mock is already set by Set")
	}

	if mmGetBySKU.defaultExpectation == nil {
		mmGetBySKU.defaultExpectation = &RepositoryMockGetBySKUExpectation{mock: mmGetBySKU.mock}
	}
	mmGetBySKU.defaultExpectation.results = &RepositoryMockGetBySKUResults{i1, err}
	return mmGetBySKU.mock
}

// Set uses given function f to mock the Repository.GetBySKU method
func (mmGetBySKU *mRepositoryMockGetBySKU) Set(f func(ctx context.Context, skuID uint32) (i1 stockmodels.Item, err error)) *RepositoryMock {
	if mmGetBySKU.defaultExpectation != nil {
		mmGetBySKU.mock.t.Fatalf("Default expectation is already set for the Repository.GetBySKU method")
	}

	if len(mmGetBySKU.expectations) > 0 {
		mmGetBySKU.mock.t.Fatalf("Some expectations are already set for the Repository.GetBySKU method")
	}

	mmGetBySKU.mock.funcGetBySKU = f
	return mmGetBySKU.mock
}

// When sets expectation for the Repository.GetBySKU which will trigger the result defined by the following
// Then helper
func (mmGetBySKU *mRepositoryMockGetBySKU) When(ctx context.Context, skuID uint32) *RepositoryMockGetBySKUExpectation {
	if mmGetBySKU.mock.funcGetBySKU != nil {
		mmGetBySKU.mock.t.Fatalf("RepositoryMock.GetBySKU mock is already set by Set")
	}

	expectation := &RepositoryMockGetBySKUExpectation{
		mock:   mmGetBySKU.mock,
		params: &RepositoryMockGetBySKUParams{ctx, skuID},
	}
	mmGetBySKU.expectations = append(mmGetBySKU.expectations, expectation)
	return expectation
}

// Then sets up Repository.GetBySKU return parameters for the expectation previously defined by the When method
func (e *RepositoryMockGetBySKUExpectation) Then(i1 stockmodels.Item, err error) *RepositoryMock {
	e.results = &RepositoryMockGetBySKUResults{i1, err}
	return e.mock
}

// Times sets number of times Repository.GetBySKU should be invoked
func (mmGetBySKU *mRepositoryMockGetBySKU) Times(n uint64) *mRepositoryMockGetBySKU {
	if n == 0 {
		mmGetBySKU.mock.t.Fatalf("Times of RepositoryMock.GetBySKU mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetBySKU.expectedInvocations, n)
	return mmGetBySKU
}

func (mmGetBySKU *mRepositoryMockGetBySKU) invocationsDone() bool {
	if len(mmGetBySKU.expectations) == 0 && mmGetBySKU.defaultExpectation == nil && mmGetBySKU.mock.funcGetBySKU == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetBySKU.mock.afterGetBySKUCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetBySKU.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetBySKU implements stock.Repository
func (mmGetBySKU *RepositoryMock) GetBySKU(ctx context.Context, skuID uint32) (i1 stockmodels.Item, err error) {
	mm_atomic.AddUint64(&mmGetBySKU.beforeGetBySKUCounter, 1)
	defer mm_atomic.AddUint64(&mmGetBySKU.afterGetBySKUCounter, 1)

	if mmGetBySKU.inspectFuncGetBySKU != nil {
		mmGetBySKU.inspectFuncGetBySKU(ctx, skuID)
	}

	mm_params := RepositoryMockGetBySKUParams{ctx, skuID}

	// Record call args
	mmGetBySKU.GetBySKUMock.mutex.Lock()
	mmGetBySKU.GetBySKUMock.callArgs = append(mmGetBySKU.GetBySKUMock.callArgs, &mm_params)
	mmGetBySKU.GetBySKUMock.mutex.Unlock()

	for _, e := range mmGetBySKU.GetBySKUMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmGetBySKU.GetBySKUMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetBySKU.GetBySKUMock.defaultExpectation.Counter, 1)
		mm_want := mmGetBySKU.GetBySKUMock.defaultExpectation.params
		mm_want_ptrs := mmGetBySKU.GetBySKUMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockGetBySKUParams{ctx, skuID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetBySKU.t.Errorf("RepositoryMock.GetBySKU got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.skuID != nil && !minimock.Equal(*mm_want_ptrs.skuID, mm_got.skuID) {
				mmGetBySKU.t.Errorf("RepositoryMock.GetBySKU got unexpected parameter skuID, want: %#v, got: %#v%s\n", *mm_want_ptrs.skuID, mm_got.skuID, minimock.Diff(*mm_want_ptrs.skuID, mm_got.skuID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetBySKU.t.Errorf("RepositoryMock.GetBySKU got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetBySKU.GetBySKUMock.defaultExpectation.results
		if mm_results == nil {
			mmGetBySKU.t.Fatal("No results are set for the RepositoryMock.GetBySKU")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmGetBySKU.funcGetBySKU != nil {
		return mmGetBySKU.funcGetBySKU(ctx, skuID)
	}
	mmGetBySKU.t.Fatalf("Unexpected call to RepositoryMock.GetBySKU. %v %v", ctx, skuID)
	return
}

// GetBySKUAfterCounter returns a count of finished RepositoryMock.GetBySKU invocations
func (mmGetBySKU *RepositoryMock) GetBySKUAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetBySKU.afterGetBySKUCounter)
}

// GetBySKUBeforeCounter returns a count of RepositoryMock.GetBySKU invocations
func (mmGetBySKU *RepositoryMock) GetBySKUBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetBySKU.beforeGetBySKUCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.GetBySKU.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetBySKU *mRepositoryMockGetBySKU) Calls() []*RepositoryMockGetBySKUParams {
	mmGetBySKU.mutex.RLock()

	argCopy := make([]*RepositoryMockGetBySKUParams, len(mmGetBySKU.callArgs))
	copy(argCopy, mmGetBySKU.callArgs)

	mmGetBySKU.mutex.RUnlock()

	return argCopy
}

// MinimockGetBySKUDone returns true if the count of the GetBySKU invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockGetBySKUDone() bool {
	if m.GetBySKUMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetBySKUMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetBySKUMock.invocationsDone()
}

// MinimockGetBySKUInspect logs each unmet expectation
func (m *RepositoryMock) MinimockGetBySKUInspect() {
	for _, e := range m.GetBySKUMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.GetBySKU with params: %#v", *e.params)
		}
	}

	afterGetBySKUCounter := mm_atomic.LoadUint64(&m.afterGetBySKUCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetBySKUMock.defaultExpectation != nil && afterGetBySKUCounter < 1 {
		if m.GetBySKUMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMock.GetBySKU")
		} else {
			m.t.Errorf("Expected call to RepositoryMock.GetBySKU with params: %#v", *m.GetBySKUMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetBySKU != nil && afterGetBySKUCounter < 1 {
		m.t.Error("Expected call to RepositoryMock.GetBySKU")
	}

	if !m.GetBySKUMock.invocationsDone() && afterGetBySKUCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.GetBySKU but found %d calls",
			mm_atomic.LoadUint64(&m.GetBySKUMock.expectedInvocations), afterGetBySKUCounter)
	}
}

type mRepositoryMockReserve struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockReserveExpectation
	expectations       []*RepositoryMockReserveExpectation

	callArgs []*RepositoryMockReserveParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// RepositoryMockReserveExpectation specifies expectation struct of the Repository.Reserve
type RepositoryMockReserveExpectation struct {
	mock      *RepositoryMock
	params    *RepositoryMockReserveParams
	paramPtrs *RepositoryMockReserveParamPtrs
	results   *RepositoryMockReserveResults
	Counter   uint64
}

// RepositoryMockReserveParams contains parameters of the Repository.Reserve
type RepositoryMockReserveParams struct {
	ctx  context.Context
	item []stockmodels.ReserveItem
}

// RepositoryMockReserveParamPtrs contains pointers to parameters of the Repository.Reserve
type RepositoryMockReserveParamPtrs struct {
	ctx  *context.Context
	item *[]stockmodels.ReserveItem
}

// RepositoryMockReserveResults contains results of the Repository.Reserve
type RepositoryMockReserveResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmReserve *mRepositoryMockReserve) Optional() *mRepositoryMockReserve {
	mmReserve.optional = true
	return mmReserve
}

// Expect sets up expected params for Repository.Reserve
func (mmReserve *mRepositoryMockReserve) Expect(ctx context.Context, item []stockmodels.ReserveItem) *mRepositoryMockReserve {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("RepositoryMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &RepositoryMockReserveExpectation{}
	}

	if mmReserve.defaultExpectation.paramPtrs != nil {
		mmReserve.mock.t.Fatalf("RepositoryMock.Reserve mock is already set by ExpectParams functions")
	}

	mmReserve.defaultExpectation.params = &RepositoryMockReserveParams{ctx, item}
	for _, e := range mmReserve.expectations {
		if minimock.Equal(e.params, mmReserve.defaultExpectation.params) {
			mmReserve.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReserve.defaultExpectation.params)
		}
	}

	return mmReserve
}

// ExpectCtxParam1 sets up expected param ctx for Repository.Reserve
func (mmReserve *mRepositoryMockReserve) ExpectCtxParam1(ctx context.Context) *mRepositoryMockReserve {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("RepositoryMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &RepositoryMockReserveExpectation{}
	}

	if mmReserve.defaultExpectation.params != nil {
		mmReserve.mock.t.Fatalf("RepositoryMock.Reserve mock is already set by Expect")
	}

	if mmReserve.defaultExpectation.paramPtrs == nil {
		mmReserve.defaultExpectation.paramPtrs = &RepositoryMockReserveParamPtrs{}
	}
	mmReserve.defaultExpectation.paramPtrs.ctx = &ctx

	return mmReserve
}

// ExpectItemParam2 sets up expected param item for Repository.Reserve
func (mmReserve *mRepositoryMockReserve) ExpectItemParam2(item []stockmodels.ReserveItem) *mRepositoryMockReserve {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("RepositoryMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &RepositoryMockReserveExpectation{}
	}

	if mmReserve.defaultExpectation.params != nil {
		mmReserve.mock.t.Fatalf("RepositoryMock.Reserve mock is already set by Expect")
	}

	if mmReserve.defaultExpectation.paramPtrs == nil {
		mmReserve.defaultExpectation.paramPtrs = &RepositoryMockReserveParamPtrs{}
	}
	mmReserve.defaultExpectation.paramPtrs.item = &item

	return mmReserve
}

// Inspect accepts an inspector function that has same arguments as the Repository.Reserve
func (mmReserve *mRepositoryMockReserve) Inspect(f func(ctx context.Context, item []stockmodels.ReserveItem)) *mRepositoryMockReserve {
	if mmReserve.mock.inspectFuncReserve != nil {
		mmReserve.mock.t.Fatalf("Inspect function is already set for RepositoryMock.Reserve")
	}

	mmReserve.mock.inspectFuncReserve = f

	return mmReserve
}

// Return sets up results that will be returned by Repository.Reserve
func (mmReserve *mRepositoryMockReserve) Return(err error) *RepositoryMock {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("RepositoryMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &RepositoryMockReserveExpectation{mock: mmReserve.mock}
	}
	mmReserve.defaultExpectation.results = &RepositoryMockReserveResults{err}
	return mmReserve.mock
}

// Set uses given function f to mock the Repository.Reserve method
func (mmReserve *mRepositoryMockReserve) Set(f func(ctx context.Context, item []stockmodels.ReserveItem) (err error)) *RepositoryMock {
	if mmReserve.defaultExpectation != nil {
		mmReserve.mock.t.Fatalf("Default expectation is already set for the Repository.Reserve method")
	}

	if len(mmReserve.expectations) > 0 {
		mmReserve.mock.t.Fatalf("Some expectations are already set for the Repository.Reserve method")
	}

	mmReserve.mock.funcReserve = f
	return mmReserve.mock
}

// When sets expectation for the Repository.Reserve which will trigger the result defined by the following
// Then helper
func (mmReserve *mRepositoryMockReserve) When(ctx context.Context, item []stockmodels.ReserveItem) *RepositoryMockReserveExpectation {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("RepositoryMock.Reserve mock is already set by Set")
	}

	expectation := &RepositoryMockReserveExpectation{
		mock:   mmReserve.mock,
		params: &RepositoryMockReserveParams{ctx, item},
	}
	mmReserve.expectations = append(mmReserve.expectations, expectation)
	return expectation
}

// Then sets up Repository.Reserve return parameters for the expectation previously defined by the When method
func (e *RepositoryMockReserveExpectation) Then(err error) *RepositoryMock {
	e.results = &RepositoryMockReserveResults{err}
	return e.mock
}

// Times sets number of times Repository.Reserve should be invoked
func (mmReserve *mRepositoryMockReserve) Times(n uint64) *mRepositoryMockReserve {
	if n == 0 {
		mmReserve.mock.t.Fatalf("Times of RepositoryMock.Reserve mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmReserve.expectedInvocations, n)
	return mmReserve
}

func (mmReserve *mRepositoryMockReserve) invocationsDone() bool {
	if len(mmReserve.expectations) == 0 && mmReserve.defaultExpectation == nil && mmReserve.mock.funcReserve == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmReserve.mock.afterReserveCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmReserve.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Reserve implements stock.Repository
func (mmReserve *RepositoryMock) Reserve(ctx context.Context, item []stockmodels.ReserveItem) (err error) {
	mm_atomic.AddUint64(&mmReserve.beforeReserveCounter, 1)
	defer mm_atomic.AddUint64(&mmReserve.afterReserveCounter, 1)

	if mmReserve.inspectFuncReserve != nil {
		mmReserve.inspectFuncReserve(ctx, item)
	}

	mm_params := RepositoryMockReserveParams{ctx, item}

	// Record call args
	mmReserve.ReserveMock.mutex.Lock()
	mmReserve.ReserveMock.callArgs = append(mmReserve.ReserveMock.callArgs, &mm_params)
	mmReserve.ReserveMock.mutex.Unlock()

	for _, e := range mmReserve.ReserveMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmReserve.ReserveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReserve.ReserveMock.defaultExpectation.Counter, 1)
		mm_want := mmReserve.ReserveMock.defaultExpectation.params
		mm_want_ptrs := mmReserve.ReserveMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockReserveParams{ctx, item}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmReserve.t.Errorf("RepositoryMock.Reserve got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.item != nil && !minimock.Equal(*mm_want_ptrs.item, mm_got.item) {
				mmReserve.t.Errorf("RepositoryMock.Reserve got unexpected parameter item, want: %#v, got: %#v%s\n", *mm_want_ptrs.item, mm_got.item, minimock.Diff(*mm_want_ptrs.item, mm_got.item))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReserve.t.Errorf("RepositoryMock.Reserve got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReserve.ReserveMock.defaultExpectation.results
		if mm_results == nil {
			mmReserve.t.Fatal("No results are set for the RepositoryMock.Reserve")
		}
		return (*mm_results).err
	}
	if mmReserve.funcReserve != nil {
		return mmReserve.funcReserve(ctx, item)
	}
	mmReserve.t.Fatalf("Unexpected call to RepositoryMock.Reserve. %v %v", ctx, item)
	return
}

// ReserveAfterCounter returns a count of finished RepositoryMock.Reserve invocations
func (mmReserve *RepositoryMock) ReserveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserve.afterReserveCounter)
}

// ReserveBeforeCounter returns a count of RepositoryMock.Reserve invocations
func (mmReserve *RepositoryMock) ReserveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserve.beforeReserveCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.Reserve.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReserve *mRepositoryMockReserve) Calls() []*RepositoryMockReserveParams {
	mmReserve.mutex.RLock()

	argCopy := make([]*RepositoryMockReserveParams, len(mmReserve.callArgs))
	copy(argCopy, mmReserve.callArgs)

	mmReserve.mutex.RUnlock()

	return argCopy
}

// MinimockReserveDone returns true if the count of the Reserve invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockReserveDone() bool {
	if m.ReserveMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ReserveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ReserveMock.invocationsDone()
}

// MinimockReserveInspect logs each unmet expectation
func (m *RepositoryMock) MinimockReserveInspect() {
	for _, e := range m.ReserveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.Reserve with params: %#v", *e.params)
		}
	}

	afterReserveCounter := mm_atomic.LoadUint64(&m.afterReserveCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ReserveMock.defaultExpectation != nil && afterReserveCounter < 1 {
		if m.ReserveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMock.Reserve")
		} else {
			m.t.Errorf("Expected call to RepositoryMock.Reserve with params: %#v", *m.ReserveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReserve != nil && afterReserveCounter < 1 {
		m.t.Error("Expected call to RepositoryMock.Reserve")
	}

	if !m.ReserveMock.invocationsDone() && afterReserveCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.Reserve but found %d calls",
			mm_atomic.LoadUint64(&m.ReserveMock.expectedInvocations), afterReserveCounter)
	}
}

type mRepositoryMockReserveCancel struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockReserveCancelExpectation
	expectations       []*RepositoryMockReserveCancelExpectation

	callArgs []*RepositoryMockReserveCancelParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// RepositoryMockReserveCancelExpectation specifies expectation struct of the Repository.ReserveCancel
type RepositoryMockReserveCancelExpectation struct {
	mock      *RepositoryMock
	params    *RepositoryMockReserveCancelParams
	paramPtrs *RepositoryMockReserveCancelParamPtrs
	results   *RepositoryMockReserveCancelResults
	Counter   uint64
}

// RepositoryMockReserveCancelParams contains parameters of the Repository.ReserveCancel
type RepositoryMockReserveCancelParams struct {
	ctx  context.Context
	item []stockmodels.ReserveItem
}

// RepositoryMockReserveCancelParamPtrs contains pointers to parameters of the Repository.ReserveCancel
type RepositoryMockReserveCancelParamPtrs struct {
	ctx  *context.Context
	item *[]stockmodels.ReserveItem
}

// RepositoryMockReserveCancelResults contains results of the Repository.ReserveCancel
type RepositoryMockReserveCancelResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmReserveCancel *mRepositoryMockReserveCancel) Optional() *mRepositoryMockReserveCancel {
	mmReserveCancel.optional = true
	return mmReserveCancel
}

// Expect sets up expected params for Repository.ReserveCancel
func (mmReserveCancel *mRepositoryMockReserveCancel) Expect(ctx context.Context, item []stockmodels.ReserveItem) *mRepositoryMockReserveCancel {
	if mmReserveCancel.mock.funcReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("RepositoryMock.ReserveCancel mock is already set by Set")
	}

	if mmReserveCancel.defaultExpectation == nil {
		mmReserveCancel.defaultExpectation = &RepositoryMockReserveCancelExpectation{}
	}

	if mmReserveCancel.defaultExpectation.paramPtrs != nil {
		mmReserveCancel.mock.t.Fatalf("RepositoryMock.ReserveCancel mock is already set by ExpectParams functions")
	}

	mmReserveCancel.defaultExpectation.params = &RepositoryMockReserveCancelParams{ctx, item}
	for _, e := range mmReserveCancel.expectations {
		if minimock.Equal(e.params, mmReserveCancel.defaultExpectation.params) {
			mmReserveCancel.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReserveCancel.defaultExpectation.params)
		}
	}

	return mmReserveCancel
}

// ExpectCtxParam1 sets up expected param ctx for Repository.ReserveCancel
func (mmReserveCancel *mRepositoryMockReserveCancel) ExpectCtxParam1(ctx context.Context) *mRepositoryMockReserveCancel {
	if mmReserveCancel.mock.funcReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("RepositoryMock.ReserveCancel mock is already set by Set")
	}

	if mmReserveCancel.defaultExpectation == nil {
		mmReserveCancel.defaultExpectation = &RepositoryMockReserveCancelExpectation{}
	}

	if mmReserveCancel.defaultExpectation.params != nil {
		mmReserveCancel.mock.t.Fatalf("RepositoryMock.ReserveCancel mock is already set by Expect")
	}

	if mmReserveCancel.defaultExpectation.paramPtrs == nil {
		mmReserveCancel.defaultExpectation.paramPtrs = &RepositoryMockReserveCancelParamPtrs{}
	}
	mmReserveCancel.defaultExpectation.paramPtrs.ctx = &ctx

	return mmReserveCancel
}

// ExpectItemParam2 sets up expected param item for Repository.ReserveCancel
func (mmReserveCancel *mRepositoryMockReserveCancel) ExpectItemParam2(item []stockmodels.ReserveItem) *mRepositoryMockReserveCancel {
	if mmReserveCancel.mock.funcReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("RepositoryMock.ReserveCancel mock is already set by Set")
	}

	if mmReserveCancel.defaultExpectation == nil {
		mmReserveCancel.defaultExpectation = &RepositoryMockReserveCancelExpectation{}
	}

	if mmReserveCancel.defaultExpectation.params != nil {
		mmReserveCancel.mock.t.Fatalf("RepositoryMock.ReserveCancel mock is already set by Expect")
	}

	if mmReserveCancel.defaultExpectation.paramPtrs == nil {
		mmReserveCancel.defaultExpectation.paramPtrs = &RepositoryMockReserveCancelParamPtrs{}
	}
	mmReserveCancel.defaultExpectation.paramPtrs.item = &item

	return mmReserveCancel
}

// Inspect accepts an inspector function that has same arguments as the Repository.ReserveCancel
func (mmReserveCancel *mRepositoryMockReserveCancel) Inspect(f func(ctx context.Context, item []stockmodels.ReserveItem)) *mRepositoryMockReserveCancel {
	if mmReserveCancel.mock.inspectFuncReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("Inspect function is already set for RepositoryMock.ReserveCancel")
	}

	mmReserveCancel.mock.inspectFuncReserveCancel = f

	return mmReserveCancel
}

// Return sets up results that will be returned by Repository.ReserveCancel
func (mmReserveCancel *mRepositoryMockReserveCancel) Return(err error) *RepositoryMock {
	if mmReserveCancel.mock.funcReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("RepositoryMock.ReserveCancel mock is already set by Set")
	}

	if mmReserveCancel.defaultExpectation == nil {
		mmReserveCancel.defaultExpectation = &RepositoryMockReserveCancelExpectation{mock: mmReserveCancel.mock}
	}
	mmReserveCancel.defaultExpectation.results = &RepositoryMockReserveCancelResults{err}
	return mmReserveCancel.mock
}

// Set uses given function f to mock the Repository.ReserveCancel method
func (mmReserveCancel *mRepositoryMockReserveCancel) Set(f func(ctx context.Context, item []stockmodels.ReserveItem) (err error)) *RepositoryMock {
	if mmReserveCancel.defaultExpectation != nil {
		mmReserveCancel.mock.t.Fatalf("Default expectation is already set for the Repository.ReserveCancel method")
	}

	if len(mmReserveCancel.expectations) > 0 {
		mmReserveCancel.mock.t.Fatalf("Some expectations are already set for the Repository.ReserveCancel method")
	}

	mmReserveCancel.mock.funcReserveCancel = f
	return mmReserveCancel.mock
}

// When sets expectation for the Repository.ReserveCancel which will trigger the result defined by the following
// Then helper
func (mmReserveCancel *mRepositoryMockReserveCancel) When(ctx context.Context, item []stockmodels.ReserveItem) *RepositoryMockReserveCancelExpectation {
	if mmReserveCancel.mock.funcReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("RepositoryMock.ReserveCancel mock is already set by Set")
	}

	expectation := &RepositoryMockReserveCancelExpectation{
		mock:   mmReserveCancel.mock,
		params: &RepositoryMockReserveCancelParams{ctx, item},
	}
	mmReserveCancel.expectations = append(mmReserveCancel.expectations, expectation)
	return expectation
}

// Then sets up Repository.ReserveCancel return parameters for the expectation previously defined by the When method
func (e *RepositoryMockReserveCancelExpectation) Then(err error) *RepositoryMock {
	e.results = &RepositoryMockReserveCancelResults{err}
	return e.mock
}

// Times sets number of times Repository.ReserveCancel should be invoked
func (mmReserveCancel *mRepositoryMockReserveCancel) Times(n uint64) *mRepositoryMockReserveCancel {
	if n == 0 {
		mmReserveCancel.mock.t.Fatalf("Times of RepositoryMock.ReserveCancel mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmReserveCancel.expectedInvocations, n)
	return mmReserveCancel
}

func (mmReserveCancel *mRepositoryMockReserveCancel) invocationsDone() bool {
	if len(mmReserveCancel.expectations) == 0 && mmReserveCancel.defaultExpectation == nil && mmReserveCancel.mock.funcReserveCancel == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmReserveCancel.mock.afterReserveCancelCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmReserveCancel.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ReserveCancel implements stock.Repository
func (mmReserveCancel *RepositoryMock) ReserveCancel(ctx context.Context, item []stockmodels.ReserveItem) (err error) {
	mm_atomic.AddUint64(&mmReserveCancel.beforeReserveCancelCounter, 1)
	defer mm_atomic.AddUint64(&mmReserveCancel.afterReserveCancelCounter, 1)

	if mmReserveCancel.inspectFuncReserveCancel != nil {
		mmReserveCancel.inspectFuncReserveCancel(ctx, item)
	}

	mm_params := RepositoryMockReserveCancelParams{ctx, item}

	// Record call args
	mmReserveCancel.ReserveCancelMock.mutex.Lock()
	mmReserveCancel.ReserveCancelMock.callArgs = append(mmReserveCancel.ReserveCancelMock.callArgs, &mm_params)
	mmReserveCancel.ReserveCancelMock.mutex.Unlock()

	for _, e := range mmReserveCancel.ReserveCancelMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmReserveCancel.ReserveCancelMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReserveCancel.ReserveCancelMock.defaultExpectation.Counter, 1)
		mm_want := mmReserveCancel.ReserveCancelMock.defaultExpectation.params
		mm_want_ptrs := mmReserveCancel.ReserveCancelMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockReserveCancelParams{ctx, item}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmReserveCancel.t.Errorf("RepositoryMock.ReserveCancel got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.item != nil && !minimock.Equal(*mm_want_ptrs.item, mm_got.item) {
				mmReserveCancel.t.Errorf("RepositoryMock.ReserveCancel got unexpected parameter item, want: %#v, got: %#v%s\n", *mm_want_ptrs.item, mm_got.item, minimock.Diff(*mm_want_ptrs.item, mm_got.item))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReserveCancel.t.Errorf("RepositoryMock.ReserveCancel got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReserveCancel.ReserveCancelMock.defaultExpectation.results
		if mm_results == nil {
			mmReserveCancel.t.Fatal("No results are set for the RepositoryMock.ReserveCancel")
		}
		return (*mm_results).err
	}
	if mmReserveCancel.funcReserveCancel != nil {
		return mmReserveCancel.funcReserveCancel(ctx, item)
	}
	mmReserveCancel.t.Fatalf("Unexpected call to RepositoryMock.ReserveCancel. %v %v", ctx, item)
	return
}

// ReserveCancelAfterCounter returns a count of finished RepositoryMock.ReserveCancel invocations
func (mmReserveCancel *RepositoryMock) ReserveCancelAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserveCancel.afterReserveCancelCounter)
}

// ReserveCancelBeforeCounter returns a count of RepositoryMock.ReserveCancel invocations
func (mmReserveCancel *RepositoryMock) ReserveCancelBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserveCancel.beforeReserveCancelCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.ReserveCancel.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReserveCancel *mRepositoryMockReserveCancel) Calls() []*RepositoryMockReserveCancelParams {
	mmReserveCancel.mutex.RLock()

	argCopy := make([]*RepositoryMockReserveCancelParams, len(mmReserveCancel.callArgs))
	copy(argCopy, mmReserveCancel.callArgs)

	mmReserveCancel.mutex.RUnlock()

	return argCopy
}

// MinimockReserveCancelDone returns true if the count of the ReserveCancel invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockReserveCancelDone() bool {
	if m.ReserveCancelMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ReserveCancelMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ReserveCancelMock.invocationsDone()
}

// MinimockReserveCancelInspect logs each unmet expectation
func (m *RepositoryMock) MinimockReserveCancelInspect() {
	for _, e := range m.ReserveCancelMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.ReserveCancel with params: %#v", *e.params)
		}
	}

	afterReserveCancelCounter := mm_atomic.LoadUint64(&m.afterReserveCancelCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ReserveCancelMock.defaultExpectation != nil && afterReserveCancelCounter < 1 {
		if m.ReserveCancelMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMock.ReserveCancel")
		} else {
			m.t.Errorf("Expected call to RepositoryMock.ReserveCancel with params: %#v", *m.ReserveCancelMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReserveCancel != nil && afterReserveCancelCounter < 1 {
		m.t.Error("Expected call to RepositoryMock.ReserveCancel")
	}

	if !m.ReserveCancelMock.invocationsDone() && afterReserveCancelCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.ReserveCancel but found %d calls",
			mm_atomic.LoadUint64(&m.ReserveCancelMock.expectedInvocations), afterReserveCancelCounter)
	}
}

type mRepositoryMockReserveRemove struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockReserveRemoveExpectation
	expectations       []*RepositoryMockReserveRemoveExpectation

	callArgs []*RepositoryMockReserveRemoveParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// RepositoryMockReserveRemoveExpectation specifies expectation struct of the Repository.ReserveRemove
type RepositoryMockReserveRemoveExpectation struct {
	mock      *RepositoryMock
	params    *RepositoryMockReserveRemoveParams
	paramPtrs *RepositoryMockReserveRemoveParamPtrs
	results   *RepositoryMockReserveRemoveResults
	Counter   uint64
}

// RepositoryMockReserveRemoveParams contains parameters of the Repository.ReserveRemove
type RepositoryMockReserveRemoveParams struct {
	ctx  context.Context
	item []stockmodels.ReserveItem
}

// RepositoryMockReserveRemoveParamPtrs contains pointers to parameters of the Repository.ReserveRemove
type RepositoryMockReserveRemoveParamPtrs struct {
	ctx  *context.Context
	item *[]stockmodels.ReserveItem
}

// RepositoryMockReserveRemoveResults contains results of the Repository.ReserveRemove
type RepositoryMockReserveRemoveResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmReserveRemove *mRepositoryMockReserveRemove) Optional() *mRepositoryMockReserveRemove {
	mmReserveRemove.optional = true
	return mmReserveRemove
}

// Expect sets up expected params for Repository.ReserveRemove
func (mmReserveRemove *mRepositoryMockReserveRemove) Expect(ctx context.Context, item []stockmodels.ReserveItem) *mRepositoryMockReserveRemove {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("RepositoryMock.ReserveRemove mock is already set by Set")
	}

	if mmReserveRemove.defaultExpectation == nil {
		mmReserveRemove.defaultExpectation = &RepositoryMockReserveRemoveExpectation{}
	}

	if mmReserveRemove.defaultExpectation.paramPtrs != nil {
		mmReserveRemove.mock.t.Fatalf("RepositoryMock.ReserveRemove mock is already set by ExpectParams functions")
	}

	mmReserveRemove.defaultExpectation.params = &RepositoryMockReserveRemoveParams{ctx, item}
	for _, e := range mmReserveRemove.expectations {
		if minimock.Equal(e.params, mmReserveRemove.defaultExpectation.params) {
			mmReserveRemove.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReserveRemove.defaultExpectation.params)
		}
	}

	return mmReserveRemove
}

// ExpectCtxParam1 sets up expected param ctx for Repository.ReserveRemove
func (mmReserveRemove *mRepositoryMockReserveRemove) ExpectCtxParam1(ctx context.Context) *mRepositoryMockReserveRemove {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("RepositoryMock.ReserveRemove mock is already set by Set")
	}

	if mmReserveRemove.defaultExpectation == nil {
		mmReserveRemove.defaultExpectation = &RepositoryMockReserveRemoveExpectation{}
	}

	if mmReserveRemove.defaultExpectation.params != nil {
		mmReserveRemove.mock.t.Fatalf("RepositoryMock.ReserveRemove mock is already set by Expect")
	}

	if mmReserveRemove.defaultExpectation.paramPtrs == nil {
		mmReserveRemove.defaultExpectation.paramPtrs = &RepositoryMockReserveRemoveParamPtrs{}
	}
	mmReserveRemove.defaultExpectation.paramPtrs.ctx = &ctx

	return mmReserveRemove
}

// ExpectItemParam2 sets up expected param item for Repository.ReserveRemove
func (mmReserveRemove *mRepositoryMockReserveRemove) ExpectItemParam2(item []stockmodels.ReserveItem) *mRepositoryMockReserveRemove {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("RepositoryMock.ReserveRemove mock is already set by Set")
	}

	if mmReserveRemove.defaultExpectation == nil {
		mmReserveRemove.defaultExpectation = &RepositoryMockReserveRemoveExpectation{}
	}

	if mmReserveRemove.defaultExpectation.params != nil {
		mmReserveRemove.mock.t.Fatalf("RepositoryMock.ReserveRemove mock is already set by Expect")
	}

	if mmReserveRemove.defaultExpectation.paramPtrs == nil {
		mmReserveRemove.defaultExpectation.paramPtrs = &RepositoryMockReserveRemoveParamPtrs{}
	}
	mmReserveRemove.defaultExpectation.paramPtrs.item = &item

	return mmReserveRemove
}

// Inspect accepts an inspector function that has same arguments as the Repository.ReserveRemove
func (mmReserveRemove *mRepositoryMockReserveRemove) Inspect(f func(ctx context.Context, item []stockmodels.ReserveItem)) *mRepositoryMockReserveRemove {
	if mmReserveRemove.mock.inspectFuncReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("Inspect function is already set for RepositoryMock.ReserveRemove")
	}

	mmReserveRemove.mock.inspectFuncReserveRemove = f

	return mmReserveRemove
}

// Return sets up results that will be returned by Repository.ReserveRemove
func (mmReserveRemove *mRepositoryMockReserveRemove) Return(err error) *RepositoryMock {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("RepositoryMock.ReserveRemove mock is already set by Set")
	}

	if mmReserveRemove.defaultExpectation == nil {
		mmReserveRemove.defaultExpectation = &RepositoryMockReserveRemoveExpectation{mock: mmReserveRemove.mock}
	}
	mmReserveRemove.defaultExpectation.results = &RepositoryMockReserveRemoveResults{err}
	return mmReserveRemove.mock
}

// Set uses given function f to mock the Repository.ReserveRemove method
func (mmReserveRemove *mRepositoryMockReserveRemove) Set(f func(ctx context.Context, item []stockmodels.ReserveItem) (err error)) *RepositoryMock {
	if mmReserveRemove.defaultExpectation != nil {
		mmReserveRemove.mock.t.Fatalf("Default expectation is already set for the Repository.ReserveRemove method")
	}

	if len(mmReserveRemove.expectations) > 0 {
		mmReserveRemove.mock.t.Fatalf("Some expectations are already set for the Repository.ReserveRemove method")
	}

	mmReserveRemove.mock.funcReserveRemove = f
	return mmReserveRemove.mock
}

// When sets expectation for the Repository.ReserveRemove which will trigger the result defined by the following
// Then helper
func (mmReserveRemove *mRepositoryMockReserveRemove) When(ctx context.Context, item []stockmodels.ReserveItem) *RepositoryMockReserveRemoveExpectation {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("RepositoryMock.ReserveRemove mock is already set by Set")
	}

	expectation := &RepositoryMockReserveRemoveExpectation{
		mock:   mmReserveRemove.mock,
		params: &RepositoryMockReserveRemoveParams{ctx, item},
	}
	mmReserveRemove.expectations = append(mmReserveRemove.expectations, expectation)
	return expectation
}

// Then sets up Repository.ReserveRemove return parameters for the expectation previously defined by the When method
func (e *RepositoryMockReserveRemoveExpectation) Then(err error) *RepositoryMock {
	e.results = &RepositoryMockReserveRemoveResults{err}
	return e.mock
}

// Times sets number of times Repository.ReserveRemove should be invoked
func (mmReserveRemove *mRepositoryMockReserveRemove) Times(n uint64) *mRepositoryMockReserveRemove {
	if n == 0 {
		mmReserveRemove.mock.t.Fatalf("Times of RepositoryMock.ReserveRemove mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmReserveRemove.expectedInvocations, n)
	return mmReserveRemove
}

func (mmReserveRemove *mRepositoryMockReserveRemove) invocationsDone() bool {
	if len(mmReserveRemove.expectations) == 0 && mmReserveRemove.defaultExpectation == nil && mmReserveRemove.mock.funcReserveRemove == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmReserveRemove.mock.afterReserveRemoveCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmReserveRemove.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ReserveRemove implements stock.Repository
func (mmReserveRemove *RepositoryMock) ReserveRemove(ctx context.Context, item []stockmodels.ReserveItem) (err error) {
	mm_atomic.AddUint64(&mmReserveRemove.beforeReserveRemoveCounter, 1)
	defer mm_atomic.AddUint64(&mmReserveRemove.afterReserveRemoveCounter, 1)

	if mmReserveRemove.inspectFuncReserveRemove != nil {
		mmReserveRemove.inspectFuncReserveRemove(ctx, item)
	}

	mm_params := RepositoryMockReserveRemoveParams{ctx, item}

	// Record call args
	mmReserveRemove.ReserveRemoveMock.mutex.Lock()
	mmReserveRemove.ReserveRemoveMock.callArgs = append(mmReserveRemove.ReserveRemoveMock.callArgs, &mm_params)
	mmReserveRemove.ReserveRemoveMock.mutex.Unlock()

	for _, e := range mmReserveRemove.ReserveRemoveMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmReserveRemove.ReserveRemoveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReserveRemove.ReserveRemoveMock.defaultExpectation.Counter, 1)
		mm_want := mmReserveRemove.ReserveRemoveMock.defaultExpectation.params
		mm_want_ptrs := mmReserveRemove.ReserveRemoveMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockReserveRemoveParams{ctx, item}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmReserveRemove.t.Errorf("RepositoryMock.ReserveRemove got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.item != nil && !minimock.Equal(*mm_want_ptrs.item, mm_got.item) {
				mmReserveRemove.t.Errorf("RepositoryMock.ReserveRemove got unexpected parameter item, want: %#v, got: %#v%s\n", *mm_want_ptrs.item, mm_got.item, minimock.Diff(*mm_want_ptrs.item, mm_got.item))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReserveRemove.t.Errorf("RepositoryMock.ReserveRemove got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReserveRemove.ReserveRemoveMock.defaultExpectation.results
		if mm_results == nil {
			mmReserveRemove.t.Fatal("No results are set for the RepositoryMock.ReserveRemove")
		}
		return (*mm_results).err
	}
	if mmReserveRemove.funcReserveRemove != nil {
		return mmReserveRemove.funcReserveRemove(ctx, item)
	}
	mmReserveRemove.t.Fatalf("Unexpected call to RepositoryMock.ReserveRemove. %v %v", ctx, item)
	return
}

// ReserveRemoveAfterCounter returns a count of finished RepositoryMock.ReserveRemove invocations
func (mmReserveRemove *RepositoryMock) ReserveRemoveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserveRemove.afterReserveRemoveCounter)
}

// ReserveRemoveBeforeCounter returns a count of RepositoryMock.ReserveRemove invocations
func (mmReserveRemove *RepositoryMock) ReserveRemoveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserveRemove.beforeReserveRemoveCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.ReserveRemove.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReserveRemove *mRepositoryMockReserveRemove) Calls() []*RepositoryMockReserveRemoveParams {
	mmReserveRemove.mutex.RLock()

	argCopy := make([]*RepositoryMockReserveRemoveParams, len(mmReserveRemove.callArgs))
	copy(argCopy, mmReserveRemove.callArgs)

	mmReserveRemove.mutex.RUnlock()

	return argCopy
}

// MinimockReserveRemoveDone returns true if the count of the ReserveRemove invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockReserveRemoveDone() bool {
	if m.ReserveRemoveMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ReserveRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ReserveRemoveMock.invocationsDone()
}

// MinimockReserveRemoveInspect logs each unmet expectation
func (m *RepositoryMock) MinimockReserveRemoveInspect() {
	for _, e := range m.ReserveRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.ReserveRemove with params: %#v", *e.params)
		}
	}

	afterReserveRemoveCounter := mm_atomic.LoadUint64(&m.afterReserveRemoveCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ReserveRemoveMock.defaultExpectation != nil && afterReserveRemoveCounter < 1 {
		if m.ReserveRemoveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMock.ReserveRemove")
		} else {
			m.t.Errorf("Expected call to RepositoryMock.ReserveRemove with params: %#v", *m.ReserveRemoveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReserveRemove != nil && afterReserveRemoveCounter < 1 {
		m.t.Error("Expected call to RepositoryMock.ReserveRemove")
	}

	if !m.ReserveRemoveMock.invocationsDone() && afterReserveRemoveCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.ReserveRemove but found %d calls",
			mm_atomic.LoadUint64(&m.ReserveRemoveMock.expectedInvocations), afterReserveRemoveCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetBySKUInspect()

			m.MinimockReserveInspect()

			m.MinimockReserveCancelInspect()

			m.MinimockReserveRemoveInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetBySKUDone() &&
		m.MinimockReserveDone() &&
		m.MinimockReserveCancelDone() &&
		m.MinimockReserveRemoveDone()
}
