// Code generated by http://github.com/gojuno/minimock (v3.3.12). DO NOT EDIT.

package mock

//go:generate minimock -i github.com/BruteMors/marketplace-service/loms/internal/service/order.StockService -o stock_service_mock.go -n StockServiceMock -p mock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	ordermodels "github.com/BruteMors/marketplace-service/loms/internal/models/order"
	stockmodels "github.com/BruteMors/marketplace-service/loms/internal/models/stock"
	"github.com/gojuno/minimock/v3"
)

// StockServiceMock implements order.StockService
type StockServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcReserve          func(ctx context.Context, item []ordermodels.Item) (err error)
	inspectFuncReserve   func(ctx context.Context, item []ordermodels.Item)
	afterReserveCounter  uint64
	beforeReserveCounter uint64
	ReserveMock          mStockServiceMockReserve

	funcReserveCancel          func(ctx context.Context, item []stockmodels.ReserveItem) (err error)
	inspectFuncReserveCancel   func(ctx context.Context, item []stockmodels.ReserveItem)
	afterReserveCancelCounter  uint64
	beforeReserveCancelCounter uint64
	ReserveCancelMock          mStockServiceMockReserveCancel

	funcReserveRemove          func(ctx context.Context, item []stockmodels.ReserveItem) (err error)
	inspectFuncReserveRemove   func(ctx context.Context, item []stockmodels.ReserveItem)
	afterReserveRemoveCounter  uint64
	beforeReserveRemoveCounter uint64
	ReserveRemoveMock          mStockServiceMockReserveRemove
}

// NewStockServiceMock returns a mock for order.StockService
func NewStockServiceMock(t minimock.Tester) *StockServiceMock {
	m := &StockServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ReserveMock = mStockServiceMockReserve{mock: m}
	m.ReserveMock.callArgs = []*StockServiceMockReserveParams{}

	m.ReserveCancelMock = mStockServiceMockReserveCancel{mock: m}
	m.ReserveCancelMock.callArgs = []*StockServiceMockReserveCancelParams{}

	m.ReserveRemoveMock = mStockServiceMockReserveRemove{mock: m}
	m.ReserveRemoveMock.callArgs = []*StockServiceMockReserveRemoveParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mStockServiceMockReserve struct {
	optional           bool
	mock               *StockServiceMock
	defaultExpectation *StockServiceMockReserveExpectation
	expectations       []*StockServiceMockReserveExpectation

	callArgs []*StockServiceMockReserveParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// StockServiceMockReserveExpectation specifies expectation struct of the StockService.Reserve
type StockServiceMockReserveExpectation struct {
	mock      *StockServiceMock
	params    *StockServiceMockReserveParams
	paramPtrs *StockServiceMockReserveParamPtrs
	results   *StockServiceMockReserveResults
	Counter   uint64
}

// StockServiceMockReserveParams contains parameters of the StockService.Reserve
type StockServiceMockReserveParams struct {
	ctx  context.Context
	item []ordermodels.Item
}

// StockServiceMockReserveParamPtrs contains pointers to parameters of the StockService.Reserve
type StockServiceMockReserveParamPtrs struct {
	ctx  *context.Context
	item *[]ordermodels.Item
}

// StockServiceMockReserveResults contains results of the StockService.Reserve
type StockServiceMockReserveResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmReserve *mStockServiceMockReserve) Optional() *mStockServiceMockReserve {
	mmReserve.optional = true
	return mmReserve
}

// Expect sets up expected params for StockService.Reserve
func (mmReserve *mStockServiceMockReserve) Expect(ctx context.Context, item []ordermodels.Item) *mStockServiceMockReserve {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("StockServiceMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &StockServiceMockReserveExpectation{}
	}

	if mmReserve.defaultExpectation.paramPtrs != nil {
		mmReserve.mock.t.Fatalf("StockServiceMock.Reserve mock is already set by ExpectParams functions")
	}

	mmReserve.defaultExpectation.params = &StockServiceMockReserveParams{ctx, item}
	for _, e := range mmReserve.expectations {
		if minimock.Equal(e.params, mmReserve.defaultExpectation.params) {
			mmReserve.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReserve.defaultExpectation.params)
		}
	}

	return mmReserve
}

// ExpectCtxParam1 sets up expected param ctx for StockService.Reserve
func (mmReserve *mStockServiceMockReserve) ExpectCtxParam1(ctx context.Context) *mStockServiceMockReserve {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("StockServiceMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &StockServiceMockReserveExpectation{}
	}

	if mmReserve.defaultExpectation.params != nil {
		mmReserve.mock.t.Fatalf("StockServiceMock.Reserve mock is already set by Expect")
	}

	if mmReserve.defaultExpectation.paramPtrs == nil {
		mmReserve.defaultExpectation.paramPtrs = &StockServiceMockReserveParamPtrs{}
	}
	mmReserve.defaultExpectation.paramPtrs.ctx = &ctx

	return mmReserve
}

// ExpectItemParam2 sets up expected param item for StockService.Reserve
func (mmReserve *mStockServiceMockReserve) ExpectItemParam2(item []ordermodels.Item) *mStockServiceMockReserve {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("StockServiceMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &StockServiceMockReserveExpectation{}
	}

	if mmReserve.defaultExpectation.params != nil {
		mmReserve.mock.t.Fatalf("StockServiceMock.Reserve mock is already set by Expect")
	}

	if mmReserve.defaultExpectation.paramPtrs == nil {
		mmReserve.defaultExpectation.paramPtrs = &StockServiceMockReserveParamPtrs{}
	}
	mmReserve.defaultExpectation.paramPtrs.item = &item

	return mmReserve
}

// Inspect accepts an inspector function that has same arguments as the StockService.Reserve
func (mmReserve *mStockServiceMockReserve) Inspect(f func(ctx context.Context, item []ordermodels.Item)) *mStockServiceMockReserve {
	if mmReserve.mock.inspectFuncReserve != nil {
		mmReserve.mock.t.Fatalf("Inspect function is already set for StockServiceMock.Reserve")
	}

	mmReserve.mock.inspectFuncReserve = f

	return mmReserve
}

// Return sets up results that will be returned by StockService.Reserve
func (mmReserve *mStockServiceMockReserve) Return(err error) *StockServiceMock {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("StockServiceMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &StockServiceMockReserveExpectation{mock: mmReserve.mock}
	}
	mmReserve.defaultExpectation.results = &StockServiceMockReserveResults{err}
	return mmReserve.mock
}

// Set uses given function f to mock the StockService.Reserve method
func (mmReserve *mStockServiceMockReserve) Set(f func(ctx context.Context, item []ordermodels.Item) (err error)) *StockServiceMock {
	if mmReserve.defaultExpectation != nil {
		mmReserve.mock.t.Fatalf("Default expectation is already set for the StockService.Reserve method")
	}

	if len(mmReserve.expectations) > 0 {
		mmReserve.mock.t.Fatalf("Some expectations are already set for the StockService.Reserve method")
	}

	mmReserve.mock.funcReserve = f
	return mmReserve.mock
}

// When sets expectation for the StockService.Reserve which will trigger the result defined by the following
// Then helper
func (mmReserve *mStockServiceMockReserve) When(ctx context.Context, item []ordermodels.Item) *StockServiceMockReserveExpectation {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("StockServiceMock.Reserve mock is already set by Set")
	}

	expectation := &StockServiceMockReserveExpectation{
		mock:   mmReserve.mock,
		params: &StockServiceMockReserveParams{ctx, item},
	}
	mmReserve.expectations = append(mmReserve.expectations, expectation)
	return expectation
}

// Then sets up StockService.Reserve return parameters for the expectation previously defined by the When method
func (e *StockServiceMockReserveExpectation) Then(err error) *StockServiceMock {
	e.results = &StockServiceMockReserveResults{err}
	return e.mock
}

// Times sets number of times StockService.Reserve should be invoked
func (mmReserve *mStockServiceMockReserve) Times(n uint64) *mStockServiceMockReserve {
	if n == 0 {
		mmReserve.mock.t.Fatalf("Times of StockServiceMock.Reserve mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmReserve.expectedInvocations, n)
	return mmReserve
}

func (mmReserve *mStockServiceMockReserve) invocationsDone() bool {
	if len(mmReserve.expectations) == 0 && mmReserve.defaultExpectation == nil && mmReserve.mock.funcReserve == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmReserve.mock.afterReserveCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmReserve.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Reserve implements order.StockService
func (mmReserve *StockServiceMock) Reserve(ctx context.Context, item []ordermodels.Item) (err error) {
	mm_atomic.AddUint64(&mmReserve.beforeReserveCounter, 1)
	defer mm_atomic.AddUint64(&mmReserve.afterReserveCounter, 1)

	if mmReserve.inspectFuncReserve != nil {
		mmReserve.inspectFuncReserve(ctx, item)
	}

	mm_params := StockServiceMockReserveParams{ctx, item}

	// Record call args
	mmReserve.ReserveMock.mutex.Lock()
	mmReserve.ReserveMock.callArgs = append(mmReserve.ReserveMock.callArgs, &mm_params)
	mmReserve.ReserveMock.mutex.Unlock()

	for _, e := range mmReserve.ReserveMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmReserve.ReserveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReserve.ReserveMock.defaultExpectation.Counter, 1)
		mm_want := mmReserve.ReserveMock.defaultExpectation.params
		mm_want_ptrs := mmReserve.ReserveMock.defaultExpectation.paramPtrs

		mm_got := StockServiceMockReserveParams{ctx, item}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmReserve.t.Errorf("StockServiceMock.Reserve got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.item != nil && !minimock.Equal(*mm_want_ptrs.item, mm_got.item) {
				mmReserve.t.Errorf("StockServiceMock.Reserve got unexpected parameter item, want: %#v, got: %#v%s\n", *mm_want_ptrs.item, mm_got.item, minimock.Diff(*mm_want_ptrs.item, mm_got.item))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReserve.t.Errorf("StockServiceMock.Reserve got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReserve.ReserveMock.defaultExpectation.results
		if mm_results == nil {
			mmReserve.t.Fatal("No results are set for the StockServiceMock.Reserve")
		}
		return (*mm_results).err
	}
	if mmReserve.funcReserve != nil {
		return mmReserve.funcReserve(ctx, item)
	}
	mmReserve.t.Fatalf("Unexpected call to StockServiceMock.Reserve. %v %v", ctx, item)
	return
}

// ReserveAfterCounter returns a count of finished StockServiceMock.Reserve invocations
func (mmReserve *StockServiceMock) ReserveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserve.afterReserveCounter)
}

// ReserveBeforeCounter returns a count of StockServiceMock.Reserve invocations
func (mmReserve *StockServiceMock) ReserveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserve.beforeReserveCounter)
}

// Calls returns a list of arguments used in each call to StockServiceMock.Reserve.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReserve *mStockServiceMockReserve) Calls() []*StockServiceMockReserveParams {
	mmReserve.mutex.RLock()

	argCopy := make([]*StockServiceMockReserveParams, len(mmReserve.callArgs))
	copy(argCopy, mmReserve.callArgs)

	mmReserve.mutex.RUnlock()

	return argCopy
}

// MinimockReserveDone returns true if the count of the Reserve invocations corresponds
// the number of defined expectations
func (m *StockServiceMock) MinimockReserveDone() bool {
	if m.ReserveMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ReserveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ReserveMock.invocationsDone()
}

// MinimockReserveInspect logs each unmet expectation
func (m *StockServiceMock) MinimockReserveInspect() {
	for _, e := range m.ReserveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StockServiceMock.Reserve with params: %#v", *e.params)
		}
	}

	afterReserveCounter := mm_atomic.LoadUint64(&m.afterReserveCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ReserveMock.defaultExpectation != nil && afterReserveCounter < 1 {
		if m.ReserveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StockServiceMock.Reserve")
		} else {
			m.t.Errorf("Expected call to StockServiceMock.Reserve with params: %#v", *m.ReserveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReserve != nil && afterReserveCounter < 1 {
		m.t.Error("Expected call to StockServiceMock.Reserve")
	}

	if !m.ReserveMock.invocationsDone() && afterReserveCounter > 0 {
		m.t.Errorf("Expected %d calls to StockServiceMock.Reserve but found %d calls",
			mm_atomic.LoadUint64(&m.ReserveMock.expectedInvocations), afterReserveCounter)
	}
}

type mStockServiceMockReserveCancel struct {
	optional           bool
	mock               *StockServiceMock
	defaultExpectation *StockServiceMockReserveCancelExpectation
	expectations       []*StockServiceMockReserveCancelExpectation

	callArgs []*StockServiceMockReserveCancelParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// StockServiceMockReserveCancelExpectation specifies expectation struct of the StockService.ReserveCancel
type StockServiceMockReserveCancelExpectation struct {
	mock      *StockServiceMock
	params    *StockServiceMockReserveCancelParams
	paramPtrs *StockServiceMockReserveCancelParamPtrs
	results   *StockServiceMockReserveCancelResults
	Counter   uint64
}

// StockServiceMockReserveCancelParams contains parameters of the StockService.ReserveCancel
type StockServiceMockReserveCancelParams struct {
	ctx  context.Context
	item []stockmodels.ReserveItem
}

// StockServiceMockReserveCancelParamPtrs contains pointers to parameters of the StockService.ReserveCancel
type StockServiceMockReserveCancelParamPtrs struct {
	ctx  *context.Context
	item *[]stockmodels.ReserveItem
}

// StockServiceMockReserveCancelResults contains results of the StockService.ReserveCancel
type StockServiceMockReserveCancelResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmReserveCancel *mStockServiceMockReserveCancel) Optional() *mStockServiceMockReserveCancel {
	mmReserveCancel.optional = true
	return mmReserveCancel
}

// Expect sets up expected params for StockService.ReserveCancel
func (mmReserveCancel *mStockServiceMockReserveCancel) Expect(ctx context.Context, item []stockmodels.ReserveItem) *mStockServiceMockReserveCancel {
	if mmReserveCancel.mock.funcReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("StockServiceMock.ReserveCancel mock is already set by Set")
	}

	if mmReserveCancel.defaultExpectation == nil {
		mmReserveCancel.defaultExpectation = &StockServiceMockReserveCancelExpectation{}
	}

	if mmReserveCancel.defaultExpectation.paramPtrs != nil {
		mmReserveCancel.mock.t.Fatalf("StockServiceMock.ReserveCancel mock is already set by ExpectParams functions")
	}

	mmReserveCancel.defaultExpectation.params = &StockServiceMockReserveCancelParams{ctx, item}
	for _, e := range mmReserveCancel.expectations {
		if minimock.Equal(e.params, mmReserveCancel.defaultExpectation.params) {
			mmReserveCancel.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReserveCancel.defaultExpectation.params)
		}
	}

	return mmReserveCancel
}

// ExpectCtxParam1 sets up expected param ctx for StockService.ReserveCancel
func (mmReserveCancel *mStockServiceMockReserveCancel) ExpectCtxParam1(ctx context.Context) *mStockServiceMockReserveCancel {
	if mmReserveCancel.mock.funcReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("StockServiceMock.ReserveCancel mock is already set by Set")
	}

	if mmReserveCancel.defaultExpectation == nil {
		mmReserveCancel.defaultExpectation = &StockServiceMockReserveCancelExpectation{}
	}

	if mmReserveCancel.defaultExpectation.params != nil {
		mmReserveCancel.mock.t.Fatalf("StockServiceMock.ReserveCancel mock is already set by Expect")
	}

	if mmReserveCancel.defaultExpectation.paramPtrs == nil {
		mmReserveCancel.defaultExpectation.paramPtrs = &StockServiceMockReserveCancelParamPtrs{}
	}
	mmReserveCancel.defaultExpectation.paramPtrs.ctx = &ctx

	return mmReserveCancel
}

// ExpectItemParam2 sets up expected param item for StockService.ReserveCancel
func (mmReserveCancel *mStockServiceMockReserveCancel) ExpectItemParam2(item []stockmodels.ReserveItem) *mStockServiceMockReserveCancel {
	if mmReserveCancel.mock.funcReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("StockServiceMock.ReserveCancel mock is already set by Set")
	}

	if mmReserveCancel.defaultExpectation == nil {
		mmReserveCancel.defaultExpectation = &StockServiceMockReserveCancelExpectation{}
	}

	if mmReserveCancel.defaultExpectation.params != nil {
		mmReserveCancel.mock.t.Fatalf("StockServiceMock.ReserveCancel mock is already set by Expect")
	}

	if mmReserveCancel.defaultExpectation.paramPtrs == nil {
		mmReserveCancel.defaultExpectation.paramPtrs = &StockServiceMockReserveCancelParamPtrs{}
	}
	mmReserveCancel.defaultExpectation.paramPtrs.item = &item

	return mmReserveCancel
}

// Inspect accepts an inspector function that has same arguments as the StockService.ReserveCancel
func (mmReserveCancel *mStockServiceMockReserveCancel) Inspect(f func(ctx context.Context, item []stockmodels.ReserveItem)) *mStockServiceMockReserveCancel {
	if mmReserveCancel.mock.inspectFuncReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("Inspect function is already set for StockServiceMock.ReserveCancel")
	}

	mmReserveCancel.mock.inspectFuncReserveCancel = f

	return mmReserveCancel
}

// Return sets up results that will be returned by StockService.ReserveCancel
func (mmReserveCancel *mStockServiceMockReserveCancel) Return(err error) *StockServiceMock {
	if mmReserveCancel.mock.funcReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("StockServiceMock.ReserveCancel mock is already set by Set")
	}

	if mmReserveCancel.defaultExpectation == nil {
		mmReserveCancel.defaultExpectation = &StockServiceMockReserveCancelExpectation{mock: mmReserveCancel.mock}
	}
	mmReserveCancel.defaultExpectation.results = &StockServiceMockReserveCancelResults{err}
	return mmReserveCancel.mock
}

// Set uses given function f to mock the StockService.ReserveCancel method
func (mmReserveCancel *mStockServiceMockReserveCancel) Set(f func(ctx context.Context, item []stockmodels.ReserveItem) (err error)) *StockServiceMock {
	if mmReserveCancel.defaultExpectation != nil {
		mmReserveCancel.mock.t.Fatalf("Default expectation is already set for the StockService.ReserveCancel method")
	}

	if len(mmReserveCancel.expectations) > 0 {
		mmReserveCancel.mock.t.Fatalf("Some expectations are already set for the StockService.ReserveCancel method")
	}

	mmReserveCancel.mock.funcReserveCancel = f
	return mmReserveCancel.mock
}

// When sets expectation for the StockService.ReserveCancel which will trigger the result defined by the following
// Then helper
func (mmReserveCancel *mStockServiceMockReserveCancel) When(ctx context.Context, item []stockmodels.ReserveItem) *StockServiceMockReserveCancelExpectation {
	if mmReserveCancel.mock.funcReserveCancel != nil {
		mmReserveCancel.mock.t.Fatalf("StockServiceMock.ReserveCancel mock is already set by Set")
	}

	expectation := &StockServiceMockReserveCancelExpectation{
		mock:   mmReserveCancel.mock,
		params: &StockServiceMockReserveCancelParams{ctx, item},
	}
	mmReserveCancel.expectations = append(mmReserveCancel.expectations, expectation)
	return expectation
}

// Then sets up StockService.ReserveCancel return parameters for the expectation previously defined by the When method
func (e *StockServiceMockReserveCancelExpectation) Then(err error) *StockServiceMock {
	e.results = &StockServiceMockReserveCancelResults{err}
	return e.mock
}

// Times sets number of times StockService.ReserveCancel should be invoked
func (mmReserveCancel *mStockServiceMockReserveCancel) Times(n uint64) *mStockServiceMockReserveCancel {
	if n == 0 {
		mmReserveCancel.mock.t.Fatalf("Times of StockServiceMock.ReserveCancel mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmReserveCancel.expectedInvocations, n)
	return mmReserveCancel
}

func (mmReserveCancel *mStockServiceMockReserveCancel) invocationsDone() bool {
	if len(mmReserveCancel.expectations) == 0 && mmReserveCancel.defaultExpectation == nil && mmReserveCancel.mock.funcReserveCancel == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmReserveCancel.mock.afterReserveCancelCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmReserveCancel.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ReserveCancel implements order.StockService
func (mmReserveCancel *StockServiceMock) ReserveCancel(ctx context.Context, item []stockmodels.ReserveItem) (err error) {
	mm_atomic.AddUint64(&mmReserveCancel.beforeReserveCancelCounter, 1)
	defer mm_atomic.AddUint64(&mmReserveCancel.afterReserveCancelCounter, 1)

	if mmReserveCancel.inspectFuncReserveCancel != nil {
		mmReserveCancel.inspectFuncReserveCancel(ctx, item)
	}

	mm_params := StockServiceMockReserveCancelParams{ctx, item}

	// Record call args
	mmReserveCancel.ReserveCancelMock.mutex.Lock()
	mmReserveCancel.ReserveCancelMock.callArgs = append(mmReserveCancel.ReserveCancelMock.callArgs, &mm_params)
	mmReserveCancel.ReserveCancelMock.mutex.Unlock()

	for _, e := range mmReserveCancel.ReserveCancelMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmReserveCancel.ReserveCancelMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReserveCancel.ReserveCancelMock.defaultExpectation.Counter, 1)
		mm_want := mmReserveCancel.ReserveCancelMock.defaultExpectation.params
		mm_want_ptrs := mmReserveCancel.ReserveCancelMock.defaultExpectation.paramPtrs

		mm_got := StockServiceMockReserveCancelParams{ctx, item}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmReserveCancel.t.Errorf("StockServiceMock.ReserveCancel got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.item != nil && !minimock.Equal(*mm_want_ptrs.item, mm_got.item) {
				mmReserveCancel.t.Errorf("StockServiceMock.ReserveCancel got unexpected parameter item, want: %#v, got: %#v%s\n", *mm_want_ptrs.item, mm_got.item, minimock.Diff(*mm_want_ptrs.item, mm_got.item))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReserveCancel.t.Errorf("StockServiceMock.ReserveCancel got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReserveCancel.ReserveCancelMock.defaultExpectation.results
		if mm_results == nil {
			mmReserveCancel.t.Fatal("No results are set for the StockServiceMock.ReserveCancel")
		}
		return (*mm_results).err
	}
	if mmReserveCancel.funcReserveCancel != nil {
		return mmReserveCancel.funcReserveCancel(ctx, item)
	}
	mmReserveCancel.t.Fatalf("Unexpected call to StockServiceMock.ReserveCancel. %v %v", ctx, item)
	return
}

// ReserveCancelAfterCounter returns a count of finished StockServiceMock.ReserveCancel invocations
func (mmReserveCancel *StockServiceMock) ReserveCancelAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserveCancel.afterReserveCancelCounter)
}

// ReserveCancelBeforeCounter returns a count of StockServiceMock.ReserveCancel invocations
func (mmReserveCancel *StockServiceMock) ReserveCancelBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserveCancel.beforeReserveCancelCounter)
}

// Calls returns a list of arguments used in each call to StockServiceMock.ReserveCancel.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReserveCancel *mStockServiceMockReserveCancel) Calls() []*StockServiceMockReserveCancelParams {
	mmReserveCancel.mutex.RLock()

	argCopy := make([]*StockServiceMockReserveCancelParams, len(mmReserveCancel.callArgs))
	copy(argCopy, mmReserveCancel.callArgs)

	mmReserveCancel.mutex.RUnlock()

	return argCopy
}

// MinimockReserveCancelDone returns true if the count of the ReserveCancel invocations corresponds
// the number of defined expectations
func (m *StockServiceMock) MinimockReserveCancelDone() bool {
	if m.ReserveCancelMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ReserveCancelMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ReserveCancelMock.invocationsDone()
}

// MinimockReserveCancelInspect logs each unmet expectation
func (m *StockServiceMock) MinimockReserveCancelInspect() {
	for _, e := range m.ReserveCancelMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StockServiceMock.ReserveCancel with params: %#v", *e.params)
		}
	}

	afterReserveCancelCounter := mm_atomic.LoadUint64(&m.afterReserveCancelCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ReserveCancelMock.defaultExpectation != nil && afterReserveCancelCounter < 1 {
		if m.ReserveCancelMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StockServiceMock.ReserveCancel")
		} else {
			m.t.Errorf("Expected call to StockServiceMock.ReserveCancel with params: %#v", *m.ReserveCancelMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReserveCancel != nil && afterReserveCancelCounter < 1 {
		m.t.Error("Expected call to StockServiceMock.ReserveCancel")
	}

	if !m.ReserveCancelMock.invocationsDone() && afterReserveCancelCounter > 0 {
		m.t.Errorf("Expected %d calls to StockServiceMock.ReserveCancel but found %d calls",
			mm_atomic.LoadUint64(&m.ReserveCancelMock.expectedInvocations), afterReserveCancelCounter)
	}
}

type mStockServiceMockReserveRemove struct {
	optional           bool
	mock               *StockServiceMock
	defaultExpectation *StockServiceMockReserveRemoveExpectation
	expectations       []*StockServiceMockReserveRemoveExpectation

	callArgs []*StockServiceMockReserveRemoveParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// StockServiceMockReserveRemoveExpectation specifies expectation struct of the StockService.ReserveRemove
type StockServiceMockReserveRemoveExpectation struct {
	mock      *StockServiceMock
	params    *StockServiceMockReserveRemoveParams
	paramPtrs *StockServiceMockReserveRemoveParamPtrs
	results   *StockServiceMockReserveRemoveResults
	Counter   uint64
}

// StockServiceMockReserveRemoveParams contains parameters of the StockService.ReserveRemove
type StockServiceMockReserveRemoveParams struct {
	ctx  context.Context
	item []stockmodels.ReserveItem
}

// StockServiceMockReserveRemoveParamPtrs contains pointers to parameters of the StockService.ReserveRemove
type StockServiceMockReserveRemoveParamPtrs struct {
	ctx  *context.Context
	item *[]stockmodels.ReserveItem
}

// StockServiceMockReserveRemoveResults contains results of the StockService.ReserveRemove
type StockServiceMockReserveRemoveResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmReserveRemove *mStockServiceMockReserveRemove) Optional() *mStockServiceMockReserveRemove {
	mmReserveRemove.optional = true
	return mmReserveRemove
}

// Expect sets up expected params for StockService.ReserveRemove
func (mmReserveRemove *mStockServiceMockReserveRemove) Expect(ctx context.Context, item []stockmodels.ReserveItem) *mStockServiceMockReserveRemove {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("StockServiceMock.ReserveRemove mock is already set by Set")
	}

	if mmReserveRemove.defaultExpectation == nil {
		mmReserveRemove.defaultExpectation = &StockServiceMockReserveRemoveExpectation{}
	}

	if mmReserveRemove.defaultExpectation.paramPtrs != nil {
		mmReserveRemove.mock.t.Fatalf("StockServiceMock.ReserveRemove mock is already set by ExpectParams functions")
	}

	mmReserveRemove.defaultExpectation.params = &StockServiceMockReserveRemoveParams{ctx, item}
	for _, e := range mmReserveRemove.expectations {
		if minimock.Equal(e.params, mmReserveRemove.defaultExpectation.params) {
			mmReserveRemove.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReserveRemove.defaultExpectation.params)
		}
	}

	return mmReserveRemove
}

// ExpectCtxParam1 sets up expected param ctx for StockService.ReserveRemove
func (mmReserveRemove *mStockServiceMockReserveRemove) ExpectCtxParam1(ctx context.Context) *mStockServiceMockReserveRemove {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("StockServiceMock.ReserveRemove mock is already set by Set")
	}

	if mmReserveRemove.defaultExpectation == nil {
		mmReserveRemove.defaultExpectation = &StockServiceMockReserveRemoveExpectation{}
	}

	if mmReserveRemove.defaultExpectation.params != nil {
		mmReserveRemove.mock.t.Fatalf("StockServiceMock.ReserveRemove mock is already set by Expect")
	}

	if mmReserveRemove.defaultExpectation.paramPtrs == nil {
		mmReserveRemove.defaultExpectation.paramPtrs = &StockServiceMockReserveRemoveParamPtrs{}
	}
	mmReserveRemove.defaultExpectation.paramPtrs.ctx = &ctx

	return mmReserveRemove
}

// ExpectItemParam2 sets up expected param item for StockService.ReserveRemove
func (mmReserveRemove *mStockServiceMockReserveRemove) ExpectItemParam2(item []stockmodels.ReserveItem) *mStockServiceMockReserveRemove {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("StockServiceMock.ReserveRemove mock is already set by Set")
	}

	if mmReserveRemove.defaultExpectation == nil {
		mmReserveRemove.defaultExpectation = &StockServiceMockReserveRemoveExpectation{}
	}

	if mmReserveRemove.defaultExpectation.params != nil {
		mmReserveRemove.mock.t.Fatalf("StockServiceMock.ReserveRemove mock is already set by Expect")
	}

	if mmReserveRemove.defaultExpectation.paramPtrs == nil {
		mmReserveRemove.defaultExpectation.paramPtrs = &StockServiceMockReserveRemoveParamPtrs{}
	}
	mmReserveRemove.defaultExpectation.paramPtrs.item = &item

	return mmReserveRemove
}

// Inspect accepts an inspector function that has same arguments as the StockService.ReserveRemove
func (mmReserveRemove *mStockServiceMockReserveRemove) Inspect(f func(ctx context.Context, item []stockmodels.ReserveItem)) *mStockServiceMockReserveRemove {
	if mmReserveRemove.mock.inspectFuncReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("Inspect function is already set for StockServiceMock.ReserveRemove")
	}

	mmReserveRemove.mock.inspectFuncReserveRemove = f

	return mmReserveRemove
}

// Return sets up results that will be returned by StockService.ReserveRemove
func (mmReserveRemove *mStockServiceMockReserveRemove) Return(err error) *StockServiceMock {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("StockServiceMock.ReserveRemove mock is already set by Set")
	}

	if mmReserveRemove.defaultExpectation == nil {
		mmReserveRemove.defaultExpectation = &StockServiceMockReserveRemoveExpectation{mock: mmReserveRemove.mock}
	}
	mmReserveRemove.defaultExpectation.results = &StockServiceMockReserveRemoveResults{err}
	return mmReserveRemove.mock
}

// Set uses given function f to mock the StockService.ReserveRemove method
func (mmReserveRemove *mStockServiceMockReserveRemove) Set(f func(ctx context.Context, item []stockmodels.ReserveItem) (err error)) *StockServiceMock {
	if mmReserveRemove.defaultExpectation != nil {
		mmReserveRemove.mock.t.Fatalf("Default expectation is already set for the StockService.ReserveRemove method")
	}

	if len(mmReserveRemove.expectations) > 0 {
		mmReserveRemove.mock.t.Fatalf("Some expectations are already set for the StockService.ReserveRemove method")
	}

	mmReserveRemove.mock.funcReserveRemove = f
	return mmReserveRemove.mock
}

// When sets expectation for the StockService.ReserveRemove which will trigger the result defined by the following
// Then helper
func (mmReserveRemove *mStockServiceMockReserveRemove) When(ctx context.Context, item []stockmodels.ReserveItem) *StockServiceMockReserveRemoveExpectation {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("StockServiceMock.ReserveRemove mock is already set by Set")
	}

	expectation := &StockServiceMockReserveRemoveExpectation{
		mock:   mmReserveRemove.mock,
		params: &StockServiceMockReserveRemoveParams{ctx, item},
	}
	mmReserveRemove.expectations = append(mmReserveRemove.expectations, expectation)
	return expectation
}

// Then sets up StockService.ReserveRemove return parameters for the expectation previously defined by the When method
func (e *StockServiceMockReserveRemoveExpectation) Then(err error) *StockServiceMock {
	e.results = &StockServiceMockReserveRemoveResults{err}
	return e.mock
}

// Times sets number of times StockService.ReserveRemove should be invoked
func (mmReserveRemove *mStockServiceMockReserveRemove) Times(n uint64) *mStockServiceMockReserveRemove {
	if n == 0 {
		mmReserveRemove.mock.t.Fatalf("Times of StockServiceMock.ReserveRemove mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmReserveRemove.expectedInvocations, n)
	return mmReserveRemove
}

func (mmReserveRemove *mStockServiceMockReserveRemove) invocationsDone() bool {
	if len(mmReserveRemove.expectations) == 0 && mmReserveRemove.defaultExpectation == nil && mmReserveRemove.mock.funcReserveRemove == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmReserveRemove.mock.afterReserveRemoveCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmReserveRemove.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ReserveRemove implements order.StockService
func (mmReserveRemove *StockServiceMock) ReserveRemove(ctx context.Context, item []stockmodels.ReserveItem) (err error) {
	mm_atomic.AddUint64(&mmReserveRemove.beforeReserveRemoveCounter, 1)
	defer mm_atomic.AddUint64(&mmReserveRemove.afterReserveRemoveCounter, 1)

	if mmReserveRemove.inspectFuncReserveRemove != nil {
		mmReserveRemove.inspectFuncReserveRemove(ctx, item)
	}

	mm_params := StockServiceMockReserveRemoveParams{ctx, item}

	// Record call args
	mmReserveRemove.ReserveRemoveMock.mutex.Lock()
	mmReserveRemove.ReserveRemoveMock.callArgs = append(mmReserveRemove.ReserveRemoveMock.callArgs, &mm_params)
	mmReserveRemove.ReserveRemoveMock.mutex.Unlock()

	for _, e := range mmReserveRemove.ReserveRemoveMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmReserveRemove.ReserveRemoveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReserveRemove.ReserveRemoveMock.defaultExpectation.Counter, 1)
		mm_want := mmReserveRemove.ReserveRemoveMock.defaultExpectation.params
		mm_want_ptrs := mmReserveRemove.ReserveRemoveMock.defaultExpectation.paramPtrs

		mm_got := StockServiceMockReserveRemoveParams{ctx, item}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmReserveRemove.t.Errorf("StockServiceMock.ReserveRemove got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.item != nil && !minimock.Equal(*mm_want_ptrs.item, mm_got.item) {
				mmReserveRemove.t.Errorf("StockServiceMock.ReserveRemove got unexpected parameter item, want: %#v, got: %#v%s\n", *mm_want_ptrs.item, mm_got.item, minimock.Diff(*mm_want_ptrs.item, mm_got.item))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReserveRemove.t.Errorf("StockServiceMock.ReserveRemove got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReserveRemove.ReserveRemoveMock.defaultExpectation.results
		if mm_results == nil {
			mmReserveRemove.t.Fatal("No results are set for the StockServiceMock.ReserveRemove")
		}
		return (*mm_results).err
	}
	if mmReserveRemove.funcReserveRemove != nil {
		return mmReserveRemove.funcReserveRemove(ctx, item)
	}
	mmReserveRemove.t.Fatalf("Unexpected call to StockServiceMock.ReserveRemove. %v %v", ctx, item)
	return
}

// ReserveRemoveAfterCounter returns a count of finished StockServiceMock.ReserveRemove invocations
func (mmReserveRemove *StockServiceMock) ReserveRemoveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserveRemove.afterReserveRemoveCounter)
}

// ReserveRemoveBeforeCounter returns a count of StockServiceMock.ReserveRemove invocations
func (mmReserveRemove *StockServiceMock) ReserveRemoveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserveRemove.beforeReserveRemoveCounter)
}

// Calls returns a list of arguments used in each call to StockServiceMock.ReserveRemove.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReserveRemove *mStockServiceMockReserveRemove) Calls() []*StockServiceMockReserveRemoveParams {
	mmReserveRemove.mutex.RLock()

	argCopy := make([]*StockServiceMockReserveRemoveParams, len(mmReserveRemove.callArgs))
	copy(argCopy, mmReserveRemove.callArgs)

	mmReserveRemove.mutex.RUnlock()

	return argCopy
}

// MinimockReserveRemoveDone returns true if the count of the ReserveRemove invocations corresponds
// the number of defined expectations
func (m *StockServiceMock) MinimockReserveRemoveDone() bool {
	if m.ReserveRemoveMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ReserveRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ReserveRemoveMock.invocationsDone()
}

// MinimockReserveRemoveInspect logs each unmet expectation
func (m *StockServiceMock) MinimockReserveRemoveInspect() {
	for _, e := range m.ReserveRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StockServiceMock.ReserveRemove with params: %#v", *e.params)
		}
	}

	afterReserveRemoveCounter := mm_atomic.LoadUint64(&m.afterReserveRemoveCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ReserveRemoveMock.defaultExpectation != nil && afterReserveRemoveCounter < 1 {
		if m.ReserveRemoveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StockServiceMock.ReserveRemove")
		} else {
			m.t.Errorf("Expected call to StockServiceMock.ReserveRemove with params: %#v", *m.ReserveRemoveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReserveRemove != nil && afterReserveRemoveCounter < 1 {
		m.t.Error("Expected call to StockServiceMock.ReserveRemove")
	}

	if !m.ReserveRemoveMock.invocationsDone() && afterReserveRemoveCounter > 0 {
		m.t.Errorf("Expected %d calls to StockServiceMock.ReserveRemove but found %d calls",
			mm_atomic.LoadUint64(&m.ReserveRemoveMock.expectedInvocations), afterReserveRemoveCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StockServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockReserveInspect()

			m.MinimockReserveCancelInspect()

			m.MinimockReserveRemoveInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StockServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StockServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockReserveDone() &&
		m.MinimockReserveCancelDone() &&
		m.MinimockReserveRemoveDone()
}
