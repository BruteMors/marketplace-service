// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: createorder.sql

package sqlc

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO "orders" (user_id, status, created_at, updated_at)
VALUES ($1, $2, NOW(), NOW())
RETURNING order_id
`

type CreateOrderParams struct {
	UserID int32
	Status OrderStatus
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (int64, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.UserID, arg.Status)
	var order_id int64
	err := row.Scan(&order_id)
	return order_id, err
}

const insertOrderItems = `-- name: InsertOrderItems :exec
INSERT INTO "orders_to_items" (order_id, item_sku, count)
SELECT $1, unnest($2::int[]), unnest($3::int[])
`

type InsertOrderItemsParams struct {
	OrderID int64
	ItemSku []int32
	Count   []int32
}

func (q *Queries) InsertOrderItems(ctx context.Context, arg InsertOrderItemsParams) error {
	_, err := q.db.Exec(ctx, insertOrderItems, arg.OrderID, arg.ItemSku, arg.Count)
	return err
}
