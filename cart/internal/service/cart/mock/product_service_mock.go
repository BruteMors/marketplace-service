// Code generated by http://github.com/gojuno/minimock (v3.3.12). DO NOT EDIT.

package mock

//go:generate minimock -i github.com/BruteMors/marketplace-service/cart/internal/service/cart.ProductService -o product_service_mock.go -n ProductServiceMock -p mock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	productserviceModels "github.com/BruteMors/marketplace-service/cart/pkg/productservice/models"
	"github.com/gojuno/minimock/v3"
)

// ProductServiceMock implements cart.ProductService
type ProductServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetListSkus          func(ctx context.Context, startAfterSku int64, count int64) (lp1 *productserviceModels.ListSkusResponse, err error)
	inspectFuncGetListSkus   func(ctx context.Context, startAfterSku int64, count int64)
	afterGetListSkusCounter  uint64
	beforeGetListSkusCounter uint64
	GetListSkusMock          mProductServiceMockGetListSkus

	funcGetProduct          func(ctx context.Context, sku int64) (gp1 *productserviceModels.GetProductResponse, err error)
	inspectFuncGetProduct   func(ctx context.Context, sku int64)
	afterGetProductCounter  uint64
	beforeGetProductCounter uint64
	GetProductMock          mProductServiceMockGetProduct

	funcGetProducts          func(ctx context.Context, skus []int64) (ga1 []productserviceModels.GetProductResponse, err error)
	inspectFuncGetProducts   func(ctx context.Context, skus []int64)
	afterGetProductsCounter  uint64
	beforeGetProductsCounter uint64
	GetProductsMock          mProductServiceMockGetProducts
}

// NewProductServiceMock returns a mock for cart.ProductService
func NewProductServiceMock(t minimock.Tester) *ProductServiceMock {
	m := &ProductServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetListSkusMock = mProductServiceMockGetListSkus{mock: m}
	m.GetListSkusMock.callArgs = []*ProductServiceMockGetListSkusParams{}

	m.GetProductMock = mProductServiceMockGetProduct{mock: m}
	m.GetProductMock.callArgs = []*ProductServiceMockGetProductParams{}

	m.GetProductsMock = mProductServiceMockGetProducts{mock: m}
	m.GetProductsMock.callArgs = []*ProductServiceMockGetProductsParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mProductServiceMockGetListSkus struct {
	optional           bool
	mock               *ProductServiceMock
	defaultExpectation *ProductServiceMockGetListSkusExpectation
	expectations       []*ProductServiceMockGetListSkusExpectation

	callArgs []*ProductServiceMockGetListSkusParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// ProductServiceMockGetListSkusExpectation specifies expectation struct of the ProductService.GetListSkus
type ProductServiceMockGetListSkusExpectation struct {
	mock      *ProductServiceMock
	params    *ProductServiceMockGetListSkusParams
	paramPtrs *ProductServiceMockGetListSkusParamPtrs
	results   *ProductServiceMockGetListSkusResults
	Counter   uint64
}

// ProductServiceMockGetListSkusParams contains parameters of the ProductService.GetListSkus
type ProductServiceMockGetListSkusParams struct {
	ctx           context.Context
	startAfterSku int64
	count         int64
}

// ProductServiceMockGetListSkusParamPtrs contains pointers to parameters of the ProductService.GetListSkus
type ProductServiceMockGetListSkusParamPtrs struct {
	ctx           *context.Context
	startAfterSku *int64
	count         *int64
}

// ProductServiceMockGetListSkusResults contains results of the ProductService.GetListSkus
type ProductServiceMockGetListSkusResults struct {
	lp1 *productserviceModels.ListSkusResponse
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetListSkus *mProductServiceMockGetListSkus) Optional() *mProductServiceMockGetListSkus {
	mmGetListSkus.optional = true
	return mmGetListSkus
}

// Expect sets up expected params for ProductService.GetListSkus
func (mmGetListSkus *mProductServiceMockGetListSkus) Expect(ctx context.Context, startAfterSku int64, count int64) *mProductServiceMockGetListSkus {
	if mmGetListSkus.mock.funcGetListSkus != nil {
		mmGetListSkus.mock.t.Fatalf("ProductServiceMock.GetListSkus mock is already set by Set")
	}

	if mmGetListSkus.defaultExpectation == nil {
		mmGetListSkus.defaultExpectation = &ProductServiceMockGetListSkusExpectation{}
	}

	if mmGetListSkus.defaultExpectation.paramPtrs != nil {
		mmGetListSkus.mock.t.Fatalf("ProductServiceMock.GetListSkus mock is already set by ExpectParams functions")
	}

	mmGetListSkus.defaultExpectation.params = &ProductServiceMockGetListSkusParams{ctx, startAfterSku, count}
	for _, e := range mmGetListSkus.expectations {
		if minimock.Equal(e.params, mmGetListSkus.defaultExpectation.params) {
			mmGetListSkus.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetListSkus.defaultExpectation.params)
		}
	}

	return mmGetListSkus
}

// ExpectCtxParam1 sets up expected param ctx for ProductService.GetListSkus
func (mmGetListSkus *mProductServiceMockGetListSkus) ExpectCtxParam1(ctx context.Context) *mProductServiceMockGetListSkus {
	if mmGetListSkus.mock.funcGetListSkus != nil {
		mmGetListSkus.mock.t.Fatalf("ProductServiceMock.GetListSkus mock is already set by Set")
	}

	if mmGetListSkus.defaultExpectation == nil {
		mmGetListSkus.defaultExpectation = &ProductServiceMockGetListSkusExpectation{}
	}

	if mmGetListSkus.defaultExpectation.params != nil {
		mmGetListSkus.mock.t.Fatalf("ProductServiceMock.GetListSkus mock is already set by Expect")
	}

	if mmGetListSkus.defaultExpectation.paramPtrs == nil {
		mmGetListSkus.defaultExpectation.paramPtrs = &ProductServiceMockGetListSkusParamPtrs{}
	}
	mmGetListSkus.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetListSkus
}

// ExpectStartAfterSkuParam2 sets up expected param startAfterSku for ProductService.GetListSkus
func (mmGetListSkus *mProductServiceMockGetListSkus) ExpectStartAfterSkuParam2(startAfterSku int64) *mProductServiceMockGetListSkus {
	if mmGetListSkus.mock.funcGetListSkus != nil {
		mmGetListSkus.mock.t.Fatalf("ProductServiceMock.GetListSkus mock is already set by Set")
	}

	if mmGetListSkus.defaultExpectation == nil {
		mmGetListSkus.defaultExpectation = &ProductServiceMockGetListSkusExpectation{}
	}

	if mmGetListSkus.defaultExpectation.params != nil {
		mmGetListSkus.mock.t.Fatalf("ProductServiceMock.GetListSkus mock is already set by Expect")
	}

	if mmGetListSkus.defaultExpectation.paramPtrs == nil {
		mmGetListSkus.defaultExpectation.paramPtrs = &ProductServiceMockGetListSkusParamPtrs{}
	}
	mmGetListSkus.defaultExpectation.paramPtrs.startAfterSku = &startAfterSku

	return mmGetListSkus
}

// ExpectCountParam3 sets up expected param count for ProductService.GetListSkus
func (mmGetListSkus *mProductServiceMockGetListSkus) ExpectCountParam3(count int64) *mProductServiceMockGetListSkus {
	if mmGetListSkus.mock.funcGetListSkus != nil {
		mmGetListSkus.mock.t.Fatalf("ProductServiceMock.GetListSkus mock is already set by Set")
	}

	if mmGetListSkus.defaultExpectation == nil {
		mmGetListSkus.defaultExpectation = &ProductServiceMockGetListSkusExpectation{}
	}

	if mmGetListSkus.defaultExpectation.params != nil {
		mmGetListSkus.mock.t.Fatalf("ProductServiceMock.GetListSkus mock is already set by Expect")
	}

	if mmGetListSkus.defaultExpectation.paramPtrs == nil {
		mmGetListSkus.defaultExpectation.paramPtrs = &ProductServiceMockGetListSkusParamPtrs{}
	}
	mmGetListSkus.defaultExpectation.paramPtrs.count = &count

	return mmGetListSkus
}

// Inspect accepts an inspector function that has same arguments as the ProductService.GetListSkus
func (mmGetListSkus *mProductServiceMockGetListSkus) Inspect(f func(ctx context.Context, startAfterSku int64, count int64)) *mProductServiceMockGetListSkus {
	if mmGetListSkus.mock.inspectFuncGetListSkus != nil {
		mmGetListSkus.mock.t.Fatalf("Inspect function is already set for ProductServiceMock.GetListSkus")
	}

	mmGetListSkus.mock.inspectFuncGetListSkus = f

	return mmGetListSkus
}

// Return sets up results that will be returned by ProductService.GetListSkus
func (mmGetListSkus *mProductServiceMockGetListSkus) Return(lp1 *productserviceModels.ListSkusResponse, err error) *ProductServiceMock {
	if mmGetListSkus.mock.funcGetListSkus != nil {
		mmGetListSkus.mock.t.Fatalf("ProductServiceMock.GetListSkus mock is already set by Set")
	}

	if mmGetListSkus.defaultExpectation == nil {
		mmGetListSkus.defaultExpectation = &ProductServiceMockGetListSkusExpectation{mock: mmGetListSkus.mock}
	}
	mmGetListSkus.defaultExpectation.results = &ProductServiceMockGetListSkusResults{lp1, err}
	return mmGetListSkus.mock
}

// Set uses given function f to mock the ProductService.GetListSkus method
func (mmGetListSkus *mProductServiceMockGetListSkus) Set(f func(ctx context.Context, startAfterSku int64, count int64) (lp1 *productserviceModels.ListSkusResponse, err error)) *ProductServiceMock {
	if mmGetListSkus.defaultExpectation != nil {
		mmGetListSkus.mock.t.Fatalf("Default expectation is already set for the ProductService.GetListSkus method")
	}

	if len(mmGetListSkus.expectations) > 0 {
		mmGetListSkus.mock.t.Fatalf("Some expectations are already set for the ProductService.GetListSkus method")
	}

	mmGetListSkus.mock.funcGetListSkus = f
	return mmGetListSkus.mock
}

// When sets expectation for the ProductService.GetListSkus which will trigger the result defined by the following
// Then helper
func (mmGetListSkus *mProductServiceMockGetListSkus) When(ctx context.Context, startAfterSku int64, count int64) *ProductServiceMockGetListSkusExpectation {
	if mmGetListSkus.mock.funcGetListSkus != nil {
		mmGetListSkus.mock.t.Fatalf("ProductServiceMock.GetListSkus mock is already set by Set")
	}

	expectation := &ProductServiceMockGetListSkusExpectation{
		mock:   mmGetListSkus.mock,
		params: &ProductServiceMockGetListSkusParams{ctx, startAfterSku, count},
	}
	mmGetListSkus.expectations = append(mmGetListSkus.expectations, expectation)
	return expectation
}

// Then sets up ProductService.GetListSkus return parameters for the expectation previously defined by the When method
func (e *ProductServiceMockGetListSkusExpectation) Then(lp1 *productserviceModels.ListSkusResponse, err error) *ProductServiceMock {
	e.results = &ProductServiceMockGetListSkusResults{lp1, err}
	return e.mock
}

// Times sets number of times ProductService.GetListSkus should be invoked
func (mmGetListSkus *mProductServiceMockGetListSkus) Times(n uint64) *mProductServiceMockGetListSkus {
	if n == 0 {
		mmGetListSkus.mock.t.Fatalf("Times of ProductServiceMock.GetListSkus mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetListSkus.expectedInvocations, n)
	return mmGetListSkus
}

func (mmGetListSkus *mProductServiceMockGetListSkus) invocationsDone() bool {
	if len(mmGetListSkus.expectations) == 0 && mmGetListSkus.defaultExpectation == nil && mmGetListSkus.mock.funcGetListSkus == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetListSkus.mock.afterGetListSkusCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetListSkus.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetListSkus implements cart.ProductService
func (mmGetListSkus *ProductServiceMock) GetListSkus(ctx context.Context, startAfterSku int64, count int64) (lp1 *productserviceModels.ListSkusResponse, err error) {
	mm_atomic.AddUint64(&mmGetListSkus.beforeGetListSkusCounter, 1)
	defer mm_atomic.AddUint64(&mmGetListSkus.afterGetListSkusCounter, 1)

	if mmGetListSkus.inspectFuncGetListSkus != nil {
		mmGetListSkus.inspectFuncGetListSkus(ctx, startAfterSku, count)
	}

	mm_params := ProductServiceMockGetListSkusParams{ctx, startAfterSku, count}

	// Record call args
	mmGetListSkus.GetListSkusMock.mutex.Lock()
	mmGetListSkus.GetListSkusMock.callArgs = append(mmGetListSkus.GetListSkusMock.callArgs, &mm_params)
	mmGetListSkus.GetListSkusMock.mutex.Unlock()

	for _, e := range mmGetListSkus.GetListSkusMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp1, e.results.err
		}
	}

	if mmGetListSkus.GetListSkusMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetListSkus.GetListSkusMock.defaultExpectation.Counter, 1)
		mm_want := mmGetListSkus.GetListSkusMock.defaultExpectation.params
		mm_want_ptrs := mmGetListSkus.GetListSkusMock.defaultExpectation.paramPtrs

		mm_got := ProductServiceMockGetListSkusParams{ctx, startAfterSku, count}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetListSkus.t.Errorf("ProductServiceMock.GetListSkus got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.startAfterSku != nil && !minimock.Equal(*mm_want_ptrs.startAfterSku, mm_got.startAfterSku) {
				mmGetListSkus.t.Errorf("ProductServiceMock.GetListSkus got unexpected parameter startAfterSku, want: %#v, got: %#v%s\n", *mm_want_ptrs.startAfterSku, mm_got.startAfterSku, minimock.Diff(*mm_want_ptrs.startAfterSku, mm_got.startAfterSku))
			}

			if mm_want_ptrs.count != nil && !minimock.Equal(*mm_want_ptrs.count, mm_got.count) {
				mmGetListSkus.t.Errorf("ProductServiceMock.GetListSkus got unexpected parameter count, want: %#v, got: %#v%s\n", *mm_want_ptrs.count, mm_got.count, minimock.Diff(*mm_want_ptrs.count, mm_got.count))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetListSkus.t.Errorf("ProductServiceMock.GetListSkus got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetListSkus.GetListSkusMock.defaultExpectation.results
		if mm_results == nil {
			mmGetListSkus.t.Fatal("No results are set for the ProductServiceMock.GetListSkus")
		}
		return (*mm_results).lp1, (*mm_results).err
	}
	if mmGetListSkus.funcGetListSkus != nil {
		return mmGetListSkus.funcGetListSkus(ctx, startAfterSku, count)
	}
	mmGetListSkus.t.Fatalf("Unexpected call to ProductServiceMock.GetListSkus. %v %v %v", ctx, startAfterSku, count)
	return
}

// GetListSkusAfterCounter returns a count of finished ProductServiceMock.GetListSkus invocations
func (mmGetListSkus *ProductServiceMock) GetListSkusAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetListSkus.afterGetListSkusCounter)
}

// GetListSkusBeforeCounter returns a count of ProductServiceMock.GetListSkus invocations
func (mmGetListSkus *ProductServiceMock) GetListSkusBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetListSkus.beforeGetListSkusCounter)
}

// Calls returns a list of arguments used in each call to ProductServiceMock.GetListSkus.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetListSkus *mProductServiceMockGetListSkus) Calls() []*ProductServiceMockGetListSkusParams {
	mmGetListSkus.mutex.RLock()

	argCopy := make([]*ProductServiceMockGetListSkusParams, len(mmGetListSkus.callArgs))
	copy(argCopy, mmGetListSkus.callArgs)

	mmGetListSkus.mutex.RUnlock()

	return argCopy
}

// MinimockGetListSkusDone returns true if the count of the GetListSkus invocations corresponds
// the number of defined expectations
func (m *ProductServiceMock) MinimockGetListSkusDone() bool {
	if m.GetListSkusMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetListSkusMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetListSkusMock.invocationsDone()
}

// MinimockGetListSkusInspect logs each unmet expectation
func (m *ProductServiceMock) MinimockGetListSkusInspect() {
	for _, e := range m.GetListSkusMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductServiceMock.GetListSkus with params: %#v", *e.params)
		}
	}

	afterGetListSkusCounter := mm_atomic.LoadUint64(&m.afterGetListSkusCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetListSkusMock.defaultExpectation != nil && afterGetListSkusCounter < 1 {
		if m.GetListSkusMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProductServiceMock.GetListSkus")
		} else {
			m.t.Errorf("Expected call to ProductServiceMock.GetListSkus with params: %#v", *m.GetListSkusMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetListSkus != nil && afterGetListSkusCounter < 1 {
		m.t.Error("Expected call to ProductServiceMock.GetListSkus")
	}

	if !m.GetListSkusMock.invocationsDone() && afterGetListSkusCounter > 0 {
		m.t.Errorf("Expected %d calls to ProductServiceMock.GetListSkus but found %d calls",
			mm_atomic.LoadUint64(&m.GetListSkusMock.expectedInvocations), afterGetListSkusCounter)
	}
}

type mProductServiceMockGetProduct struct {
	optional           bool
	mock               *ProductServiceMock
	defaultExpectation *ProductServiceMockGetProductExpectation
	expectations       []*ProductServiceMockGetProductExpectation

	callArgs []*ProductServiceMockGetProductParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// ProductServiceMockGetProductExpectation specifies expectation struct of the ProductService.GetProduct
type ProductServiceMockGetProductExpectation struct {
	mock      *ProductServiceMock
	params    *ProductServiceMockGetProductParams
	paramPtrs *ProductServiceMockGetProductParamPtrs
	results   *ProductServiceMockGetProductResults
	Counter   uint64
}

// ProductServiceMockGetProductParams contains parameters of the ProductService.GetProduct
type ProductServiceMockGetProductParams struct {
	ctx context.Context
	sku int64
}

// ProductServiceMockGetProductParamPtrs contains pointers to parameters of the ProductService.GetProduct
type ProductServiceMockGetProductParamPtrs struct {
	ctx *context.Context
	sku *int64
}

// ProductServiceMockGetProductResults contains results of the ProductService.GetProduct
type ProductServiceMockGetProductResults struct {
	gp1 *productserviceModels.GetProductResponse
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetProduct *mProductServiceMockGetProduct) Optional() *mProductServiceMockGetProduct {
	mmGetProduct.optional = true
	return mmGetProduct
}

// Expect sets up expected params for ProductService.GetProduct
func (mmGetProduct *mProductServiceMockGetProduct) Expect(ctx context.Context, sku int64) *mProductServiceMockGetProduct {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("ProductServiceMock.GetProduct mock is already set by Set")
	}

	if mmGetProduct.defaultExpectation == nil {
		mmGetProduct.defaultExpectation = &ProductServiceMockGetProductExpectation{}
	}

	if mmGetProduct.defaultExpectation.paramPtrs != nil {
		mmGetProduct.mock.t.Fatalf("ProductServiceMock.GetProduct mock is already set by ExpectParams functions")
	}

	mmGetProduct.defaultExpectation.params = &ProductServiceMockGetProductParams{ctx, sku}
	for _, e := range mmGetProduct.expectations {
		if minimock.Equal(e.params, mmGetProduct.defaultExpectation.params) {
			mmGetProduct.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProduct.defaultExpectation.params)
		}
	}

	return mmGetProduct
}

// ExpectCtxParam1 sets up expected param ctx for ProductService.GetProduct
func (mmGetProduct *mProductServiceMockGetProduct) ExpectCtxParam1(ctx context.Context) *mProductServiceMockGetProduct {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("ProductServiceMock.GetProduct mock is already set by Set")
	}

	if mmGetProduct.defaultExpectation == nil {
		mmGetProduct.defaultExpectation = &ProductServiceMockGetProductExpectation{}
	}

	if mmGetProduct.defaultExpectation.params != nil {
		mmGetProduct.mock.t.Fatalf("ProductServiceMock.GetProduct mock is already set by Expect")
	}

	if mmGetProduct.defaultExpectation.paramPtrs == nil {
		mmGetProduct.defaultExpectation.paramPtrs = &ProductServiceMockGetProductParamPtrs{}
	}
	mmGetProduct.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetProduct
}

// ExpectSkuParam2 sets up expected param sku for ProductService.GetProduct
func (mmGetProduct *mProductServiceMockGetProduct) ExpectSkuParam2(sku int64) *mProductServiceMockGetProduct {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("ProductServiceMock.GetProduct mock is already set by Set")
	}

	if mmGetProduct.defaultExpectation == nil {
		mmGetProduct.defaultExpectation = &ProductServiceMockGetProductExpectation{}
	}

	if mmGetProduct.defaultExpectation.params != nil {
		mmGetProduct.mock.t.Fatalf("ProductServiceMock.GetProduct mock is already set by Expect")
	}

	if mmGetProduct.defaultExpectation.paramPtrs == nil {
		mmGetProduct.defaultExpectation.paramPtrs = &ProductServiceMockGetProductParamPtrs{}
	}
	mmGetProduct.defaultExpectation.paramPtrs.sku = &sku

	return mmGetProduct
}

// Inspect accepts an inspector function that has same arguments as the ProductService.GetProduct
func (mmGetProduct *mProductServiceMockGetProduct) Inspect(f func(ctx context.Context, sku int64)) *mProductServiceMockGetProduct {
	if mmGetProduct.mock.inspectFuncGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("Inspect function is already set for ProductServiceMock.GetProduct")
	}

	mmGetProduct.mock.inspectFuncGetProduct = f

	return mmGetProduct
}

// Return sets up results that will be returned by ProductService.GetProduct
func (mmGetProduct *mProductServiceMockGetProduct) Return(gp1 *productserviceModels.GetProductResponse, err error) *ProductServiceMock {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("ProductServiceMock.GetProduct mock is already set by Set")
	}

	if mmGetProduct.defaultExpectation == nil {
		mmGetProduct.defaultExpectation = &ProductServiceMockGetProductExpectation{mock: mmGetProduct.mock}
	}
	mmGetProduct.defaultExpectation.results = &ProductServiceMockGetProductResults{gp1, err}
	return mmGetProduct.mock
}

// Set uses given function f to mock the ProductService.GetProduct method
func (mmGetProduct *mProductServiceMockGetProduct) Set(f func(ctx context.Context, sku int64) (gp1 *productserviceModels.GetProductResponse, err error)) *ProductServiceMock {
	if mmGetProduct.defaultExpectation != nil {
		mmGetProduct.mock.t.Fatalf("Default expectation is already set for the ProductService.GetProduct method")
	}

	if len(mmGetProduct.expectations) > 0 {
		mmGetProduct.mock.t.Fatalf("Some expectations are already set for the ProductService.GetProduct method")
	}

	mmGetProduct.mock.funcGetProduct = f
	return mmGetProduct.mock
}

// When sets expectation for the ProductService.GetProduct which will trigger the result defined by the following
// Then helper
func (mmGetProduct *mProductServiceMockGetProduct) When(ctx context.Context, sku int64) *ProductServiceMockGetProductExpectation {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("ProductServiceMock.GetProduct mock is already set by Set")
	}

	expectation := &ProductServiceMockGetProductExpectation{
		mock:   mmGetProduct.mock,
		params: &ProductServiceMockGetProductParams{ctx, sku},
	}
	mmGetProduct.expectations = append(mmGetProduct.expectations, expectation)
	return expectation
}

// Then sets up ProductService.GetProduct return parameters for the expectation previously defined by the When method
func (e *ProductServiceMockGetProductExpectation) Then(gp1 *productserviceModels.GetProductResponse, err error) *ProductServiceMock {
	e.results = &ProductServiceMockGetProductResults{gp1, err}
	return e.mock
}

// Times sets number of times ProductService.GetProduct should be invoked
func (mmGetProduct *mProductServiceMockGetProduct) Times(n uint64) *mProductServiceMockGetProduct {
	if n == 0 {
		mmGetProduct.mock.t.Fatalf("Times of ProductServiceMock.GetProduct mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetProduct.expectedInvocations, n)
	return mmGetProduct
}

func (mmGetProduct *mProductServiceMockGetProduct) invocationsDone() bool {
	if len(mmGetProduct.expectations) == 0 && mmGetProduct.defaultExpectation == nil && mmGetProduct.mock.funcGetProduct == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetProduct.mock.afterGetProductCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetProduct.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetProduct implements cart.ProductService
func (mmGetProduct *ProductServiceMock) GetProduct(ctx context.Context, sku int64) (gp1 *productserviceModels.GetProductResponse, err error) {
	mm_atomic.AddUint64(&mmGetProduct.beforeGetProductCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProduct.afterGetProductCounter, 1)

	if mmGetProduct.inspectFuncGetProduct != nil {
		mmGetProduct.inspectFuncGetProduct(ctx, sku)
	}

	mm_params := ProductServiceMockGetProductParams{ctx, sku}

	// Record call args
	mmGetProduct.GetProductMock.mutex.Lock()
	mmGetProduct.GetProductMock.callArgs = append(mmGetProduct.GetProductMock.callArgs, &mm_params)
	mmGetProduct.GetProductMock.mutex.Unlock()

	for _, e := range mmGetProduct.GetProductMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp1, e.results.err
		}
	}

	if mmGetProduct.GetProductMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProduct.GetProductMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProduct.GetProductMock.defaultExpectation.params
		mm_want_ptrs := mmGetProduct.GetProductMock.defaultExpectation.paramPtrs

		mm_got := ProductServiceMockGetProductParams{ctx, sku}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetProduct.t.Errorf("ProductServiceMock.GetProduct got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.sku != nil && !minimock.Equal(*mm_want_ptrs.sku, mm_got.sku) {
				mmGetProduct.t.Errorf("ProductServiceMock.GetProduct got unexpected parameter sku, want: %#v, got: %#v%s\n", *mm_want_ptrs.sku, mm_got.sku, minimock.Diff(*mm_want_ptrs.sku, mm_got.sku))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProduct.t.Errorf("ProductServiceMock.GetProduct got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProduct.GetProductMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProduct.t.Fatal("No results are set for the ProductServiceMock.GetProduct")
		}
		return (*mm_results).gp1, (*mm_results).err
	}
	if mmGetProduct.funcGetProduct != nil {
		return mmGetProduct.funcGetProduct(ctx, sku)
	}
	mmGetProduct.t.Fatalf("Unexpected call to ProductServiceMock.GetProduct. %v %v", ctx, sku)
	return
}

// GetProductAfterCounter returns a count of finished ProductServiceMock.GetProduct invocations
func (mmGetProduct *ProductServiceMock) GetProductAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProduct.afterGetProductCounter)
}

// GetProductBeforeCounter returns a count of ProductServiceMock.GetProduct invocations
func (mmGetProduct *ProductServiceMock) GetProductBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProduct.beforeGetProductCounter)
}

// Calls returns a list of arguments used in each call to ProductServiceMock.GetProduct.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProduct *mProductServiceMockGetProduct) Calls() []*ProductServiceMockGetProductParams {
	mmGetProduct.mutex.RLock()

	argCopy := make([]*ProductServiceMockGetProductParams, len(mmGetProduct.callArgs))
	copy(argCopy, mmGetProduct.callArgs)

	mmGetProduct.mutex.RUnlock()

	return argCopy
}

// MinimockGetProductDone returns true if the count of the GetProduct invocations corresponds
// the number of defined expectations
func (m *ProductServiceMock) MinimockGetProductDone() bool {
	if m.GetProductMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetProductMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetProductMock.invocationsDone()
}

// MinimockGetProductInspect logs each unmet expectation
func (m *ProductServiceMock) MinimockGetProductInspect() {
	for _, e := range m.GetProductMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductServiceMock.GetProduct with params: %#v", *e.params)
		}
	}

	afterGetProductCounter := mm_atomic.LoadUint64(&m.afterGetProductCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductMock.defaultExpectation != nil && afterGetProductCounter < 1 {
		if m.GetProductMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProductServiceMock.GetProduct")
		} else {
			m.t.Errorf("Expected call to ProductServiceMock.GetProduct with params: %#v", *m.GetProductMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProduct != nil && afterGetProductCounter < 1 {
		m.t.Error("Expected call to ProductServiceMock.GetProduct")
	}

	if !m.GetProductMock.invocationsDone() && afterGetProductCounter > 0 {
		m.t.Errorf("Expected %d calls to ProductServiceMock.GetProduct but found %d calls",
			mm_atomic.LoadUint64(&m.GetProductMock.expectedInvocations), afterGetProductCounter)
	}
}

type mProductServiceMockGetProducts struct {
	optional           bool
	mock               *ProductServiceMock
	defaultExpectation *ProductServiceMockGetProductsExpectation
	expectations       []*ProductServiceMockGetProductsExpectation

	callArgs []*ProductServiceMockGetProductsParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// ProductServiceMockGetProductsExpectation specifies expectation struct of the ProductService.GetProducts
type ProductServiceMockGetProductsExpectation struct {
	mock      *ProductServiceMock
	params    *ProductServiceMockGetProductsParams
	paramPtrs *ProductServiceMockGetProductsParamPtrs
	results   *ProductServiceMockGetProductsResults
	Counter   uint64
}

// ProductServiceMockGetProductsParams contains parameters of the ProductService.GetProducts
type ProductServiceMockGetProductsParams struct {
	ctx  context.Context
	skus []int64
}

// ProductServiceMockGetProductsParamPtrs contains pointers to parameters of the ProductService.GetProducts
type ProductServiceMockGetProductsParamPtrs struct {
	ctx  *context.Context
	skus *[]int64
}

// ProductServiceMockGetProductsResults contains results of the ProductService.GetProducts
type ProductServiceMockGetProductsResults struct {
	ga1 []productserviceModels.GetProductResponse
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetProducts *mProductServiceMockGetProducts) Optional() *mProductServiceMockGetProducts {
	mmGetProducts.optional = true
	return mmGetProducts
}

// Expect sets up expected params for ProductService.GetProducts
func (mmGetProducts *mProductServiceMockGetProducts) Expect(ctx context.Context, skus []int64) *mProductServiceMockGetProducts {
	if mmGetProducts.mock.funcGetProducts != nil {
		mmGetProducts.mock.t.Fatalf("ProductServiceMock.GetProducts mock is already set by Set")
	}

	if mmGetProducts.defaultExpectation == nil {
		mmGetProducts.defaultExpectation = &ProductServiceMockGetProductsExpectation{}
	}

	if mmGetProducts.defaultExpectation.paramPtrs != nil {
		mmGetProducts.mock.t.Fatalf("ProductServiceMock.GetProducts mock is already set by ExpectParams functions")
	}

	mmGetProducts.defaultExpectation.params = &ProductServiceMockGetProductsParams{ctx, skus}
	for _, e := range mmGetProducts.expectations {
		if minimock.Equal(e.params, mmGetProducts.defaultExpectation.params) {
			mmGetProducts.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProducts.defaultExpectation.params)
		}
	}

	return mmGetProducts
}

// ExpectCtxParam1 sets up expected param ctx for ProductService.GetProducts
func (mmGetProducts *mProductServiceMockGetProducts) ExpectCtxParam1(ctx context.Context) *mProductServiceMockGetProducts {
	if mmGetProducts.mock.funcGetProducts != nil {
		mmGetProducts.mock.t.Fatalf("ProductServiceMock.GetProducts mock is already set by Set")
	}

	if mmGetProducts.defaultExpectation == nil {
		mmGetProducts.defaultExpectation = &ProductServiceMockGetProductsExpectation{}
	}

	if mmGetProducts.defaultExpectation.params != nil {
		mmGetProducts.mock.t.Fatalf("ProductServiceMock.GetProducts mock is already set by Expect")
	}

	if mmGetProducts.defaultExpectation.paramPtrs == nil {
		mmGetProducts.defaultExpectation.paramPtrs = &ProductServiceMockGetProductsParamPtrs{}
	}
	mmGetProducts.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetProducts
}

// ExpectSkusParam2 sets up expected param skus for ProductService.GetProducts
func (mmGetProducts *mProductServiceMockGetProducts) ExpectSkusParam2(skus []int64) *mProductServiceMockGetProducts {
	if mmGetProducts.mock.funcGetProducts != nil {
		mmGetProducts.mock.t.Fatalf("ProductServiceMock.GetProducts mock is already set by Set")
	}

	if mmGetProducts.defaultExpectation == nil {
		mmGetProducts.defaultExpectation = &ProductServiceMockGetProductsExpectation{}
	}

	if mmGetProducts.defaultExpectation.params != nil {
		mmGetProducts.mock.t.Fatalf("ProductServiceMock.GetProducts mock is already set by Expect")
	}

	if mmGetProducts.defaultExpectation.paramPtrs == nil {
		mmGetProducts.defaultExpectation.paramPtrs = &ProductServiceMockGetProductsParamPtrs{}
	}
	mmGetProducts.defaultExpectation.paramPtrs.skus = &skus

	return mmGetProducts
}

// Inspect accepts an inspector function that has same arguments as the ProductService.GetProducts
func (mmGetProducts *mProductServiceMockGetProducts) Inspect(f func(ctx context.Context, skus []int64)) *mProductServiceMockGetProducts {
	if mmGetProducts.mock.inspectFuncGetProducts != nil {
		mmGetProducts.mock.t.Fatalf("Inspect function is already set for ProductServiceMock.GetProducts")
	}

	mmGetProducts.mock.inspectFuncGetProducts = f

	return mmGetProducts
}

// Return sets up results that will be returned by ProductService.GetProducts
func (mmGetProducts *mProductServiceMockGetProducts) Return(ga1 []productserviceModels.GetProductResponse, err error) *ProductServiceMock {
	if mmGetProducts.mock.funcGetProducts != nil {
		mmGetProducts.mock.t.Fatalf("ProductServiceMock.GetProducts mock is already set by Set")
	}

	if mmGetProducts.defaultExpectation == nil {
		mmGetProducts.defaultExpectation = &ProductServiceMockGetProductsExpectation{mock: mmGetProducts.mock}
	}
	mmGetProducts.defaultExpectation.results = &ProductServiceMockGetProductsResults{ga1, err}
	return mmGetProducts.mock
}

// Set uses given function f to mock the ProductService.GetProducts method
func (mmGetProducts *mProductServiceMockGetProducts) Set(f func(ctx context.Context, skus []int64) (ga1 []productserviceModels.GetProductResponse, err error)) *ProductServiceMock {
	if mmGetProducts.defaultExpectation != nil {
		mmGetProducts.mock.t.Fatalf("Default expectation is already set for the ProductService.GetProducts method")
	}

	if len(mmGetProducts.expectations) > 0 {
		mmGetProducts.mock.t.Fatalf("Some expectations are already set for the ProductService.GetProducts method")
	}

	mmGetProducts.mock.funcGetProducts = f
	return mmGetProducts.mock
}

// When sets expectation for the ProductService.GetProducts which will trigger the result defined by the following
// Then helper
func (mmGetProducts *mProductServiceMockGetProducts) When(ctx context.Context, skus []int64) *ProductServiceMockGetProductsExpectation {
	if mmGetProducts.mock.funcGetProducts != nil {
		mmGetProducts.mock.t.Fatalf("ProductServiceMock.GetProducts mock is already set by Set")
	}

	expectation := &ProductServiceMockGetProductsExpectation{
		mock:   mmGetProducts.mock,
		params: &ProductServiceMockGetProductsParams{ctx, skus},
	}
	mmGetProducts.expectations = append(mmGetProducts.expectations, expectation)
	return expectation
}

// Then sets up ProductService.GetProducts return parameters for the expectation previously defined by the When method
func (e *ProductServiceMockGetProductsExpectation) Then(ga1 []productserviceModels.GetProductResponse, err error) *ProductServiceMock {
	e.results = &ProductServiceMockGetProductsResults{ga1, err}
	return e.mock
}

// Times sets number of times ProductService.GetProducts should be invoked
func (mmGetProducts *mProductServiceMockGetProducts) Times(n uint64) *mProductServiceMockGetProducts {
	if n == 0 {
		mmGetProducts.mock.t.Fatalf("Times of ProductServiceMock.GetProducts mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetProducts.expectedInvocations, n)
	return mmGetProducts
}

func (mmGetProducts *mProductServiceMockGetProducts) invocationsDone() bool {
	if len(mmGetProducts.expectations) == 0 && mmGetProducts.defaultExpectation == nil && mmGetProducts.mock.funcGetProducts == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetProducts.mock.afterGetProductsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetProducts.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetProducts implements cart.ProductService
func (mmGetProducts *ProductServiceMock) GetProducts(ctx context.Context, skus []int64) (ga1 []productserviceModels.GetProductResponse, err error) {
	mm_atomic.AddUint64(&mmGetProducts.beforeGetProductsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProducts.afterGetProductsCounter, 1)

	if mmGetProducts.inspectFuncGetProducts != nil {
		mmGetProducts.inspectFuncGetProducts(ctx, skus)
	}

	mm_params := ProductServiceMockGetProductsParams{ctx, skus}

	// Record call args
	mmGetProducts.GetProductsMock.mutex.Lock()
	mmGetProducts.GetProductsMock.callArgs = append(mmGetProducts.GetProductsMock.callArgs, &mm_params)
	mmGetProducts.GetProductsMock.mutex.Unlock()

	for _, e := range mmGetProducts.GetProductsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ga1, e.results.err
		}
	}

	if mmGetProducts.GetProductsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProducts.GetProductsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProducts.GetProductsMock.defaultExpectation.params
		mm_want_ptrs := mmGetProducts.GetProductsMock.defaultExpectation.paramPtrs

		mm_got := ProductServiceMockGetProductsParams{ctx, skus}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetProducts.t.Errorf("ProductServiceMock.GetProducts got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.skus != nil && !minimock.Equal(*mm_want_ptrs.skus, mm_got.skus) {
				mmGetProducts.t.Errorf("ProductServiceMock.GetProducts got unexpected parameter skus, want: %#v, got: %#v%s\n", *mm_want_ptrs.skus, mm_got.skus, minimock.Diff(*mm_want_ptrs.skus, mm_got.skus))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProducts.t.Errorf("ProductServiceMock.GetProducts got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProducts.GetProductsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProducts.t.Fatal("No results are set for the ProductServiceMock.GetProducts")
		}
		return (*mm_results).ga1, (*mm_results).err
	}
	if mmGetProducts.funcGetProducts != nil {
		return mmGetProducts.funcGetProducts(ctx, skus)
	}
	mmGetProducts.t.Fatalf("Unexpected call to ProductServiceMock.GetProducts. %v %v", ctx, skus)
	return
}

// GetProductsAfterCounter returns a count of finished ProductServiceMock.GetProducts invocations
func (mmGetProducts *ProductServiceMock) GetProductsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProducts.afterGetProductsCounter)
}

// GetProductsBeforeCounter returns a count of ProductServiceMock.GetProducts invocations
func (mmGetProducts *ProductServiceMock) GetProductsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProducts.beforeGetProductsCounter)
}

// Calls returns a list of arguments used in each call to ProductServiceMock.GetProducts.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProducts *mProductServiceMockGetProducts) Calls() []*ProductServiceMockGetProductsParams {
	mmGetProducts.mutex.RLock()

	argCopy := make([]*ProductServiceMockGetProductsParams, len(mmGetProducts.callArgs))
	copy(argCopy, mmGetProducts.callArgs)

	mmGetProducts.mutex.RUnlock()

	return argCopy
}

// MinimockGetProductsDone returns true if the count of the GetProducts invocations corresponds
// the number of defined expectations
func (m *ProductServiceMock) MinimockGetProductsDone() bool {
	if m.GetProductsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetProductsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetProductsMock.invocationsDone()
}

// MinimockGetProductsInspect logs each unmet expectation
func (m *ProductServiceMock) MinimockGetProductsInspect() {
	for _, e := range m.GetProductsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductServiceMock.GetProducts with params: %#v", *e.params)
		}
	}

	afterGetProductsCounter := mm_atomic.LoadUint64(&m.afterGetProductsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductsMock.defaultExpectation != nil && afterGetProductsCounter < 1 {
		if m.GetProductsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProductServiceMock.GetProducts")
		} else {
			m.t.Errorf("Expected call to ProductServiceMock.GetProducts with params: %#v", *m.GetProductsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProducts != nil && afterGetProductsCounter < 1 {
		m.t.Error("Expected call to ProductServiceMock.GetProducts")
	}

	if !m.GetProductsMock.invocationsDone() && afterGetProductsCounter > 0 {
		m.t.Errorf("Expected %d calls to ProductServiceMock.GetProducts but found %d calls",
			mm_atomic.LoadUint64(&m.GetProductsMock.expectedInvocations), afterGetProductsCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProductServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetListSkusInspect()

			m.MinimockGetProductInspect()

			m.MinimockGetProductsInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProductServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProductServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetListSkusDone() &&
		m.MinimockGetProductDone() &&
		m.MinimockGetProductsDone()
}
